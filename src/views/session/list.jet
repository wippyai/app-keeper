{{ extends "common/layout" }}

{* Page title and description *}
{{ block title() }}Session Manager{{ end }}
{{ block metaDescription() }}View and manage your chat sessions{{ end }}

{{ block mainContent() }}
<div x-data="sessionListApp" x-init="initialize()" class="space-y-4">
    <!-- Header with controls -->
    <div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-surface-200 dark:border-surface-600">
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div>
                    <h1 class="text-xl leading-6 font-medium text-surface-900 dark:text-surface-100">
                        Sessions
                        <span x-show="isLoading" class="inline-block ml-2">
                            <iconify-icon icon="tabler:loader-2" class="animate-spin" width="20"
                                          height="20"></iconify-icon>
                        </span>
                    </h1>
                    <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">
                        View and manage your chat sessions
                    </p>
                </div>
                <div class="flex flex-wrap gap-2">
                    <div class="relative w-64">
                        <input
                                type="text"
                                x-model="searchTerm"
                                @input="applyFilter()"
                                class="block w-full pl-10 pr-3 py-2 border border-surface-300 dark:border-surface-600 rounded-md shadow-sm bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-400 focus:border-primary-400 sm:text-sm"
                                placeholder="Search by title or ID">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <iconify-icon icon="tabler:search"
                                          class="h-5 w-5 text-surface-400 dark:text-surface-500"></iconify-icon>
                        </div>
                        <button
                                @click="clearSearch()"
                                x-show="searchTerm.length > 0"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer text-surface-400 hover:text-surface-600 dark:hover:text-surface-300">
                            <iconify-icon icon="tabler:x" class="h-4 w-4"></iconify-icon>
                        </button>
                    </div>
                    <button
                            @click="viewGenericDumpPage"
                            :disabled="isLoading"
                            class="inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                            :class="{'opacity-50 cursor-not-allowed': isLoading && !navigateApi}">
                        <iconify-icon icon="tabler:file-text" class="mr-2" width="20" height="20"></iconify-icon>
                        View Dump
                    </button>
                    <button
                            @click="refreshSessions"
                            :disabled="isLoading"
                            class="inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                            :class="{'opacity-50 cursor-not-allowed': isLoading}">
                        <iconify-icon :icon="isLoading ? 'tabler:loader-2' : 'tabler:refresh'"
                                      :class="{'animate-spin': isLoading}" class="mr-2" width="20"
                                      height="20"></iconify-icon>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div x-show="isLoading && !sessions.length"
         class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg p-6 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mx-auto"></div>
        <p class="mt-4 text-surface-600 dark:text-surface-400">Loading sessions...</p>
    </div>

    <!-- Error Message -->
    <div x-show="error" class="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 p-4 rounded-lg">
        <div class="flex">
            <iconify-icon icon="tabler:alert-circle"
                          class="h-5 w-5 text-red-600 dark:text-red-400 mt-0.5 mr-3"></iconify-icon>
            <div>
                <h3 class="text-sm font-medium text-red-800 dark:text-red-300">Error Loading Sessions</h3>
                <p class="mt-1 text-sm text-red-700 dark:text-red-400" x-text="error"></p>
                <button
                        @click="refreshSessions"
                        class="mt-2 inline-flex items-center px-2.5 py-1.5 border border-red-300 dark:border-red-700 text-xs font-medium rounded text-red-700 dark:text-red-300 bg-white dark:bg-red-900 hover:bg-red-50 dark:hover:bg-red-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                    Try Again
                </button>
            </div>
        </div>
    </div>

    <!-- Sessions Table -->
    <div x-show="!isLoading || sessions.length > 0"
         class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden">
        <!-- Empty State -->
        <div x-show="!isLoading && filteredSessions.length === 0" class="py-12 text-center">
            <iconify-icon icon="tabler:message-off" class="w-16 h-16 mx-auto text-surface-400 dark:text-surface-600"
                          width="64" height="64"></iconify-icon>
            <h3 class="mt-4 text-sm font-medium text-surface-900 dark:text-surface-100"
                x-text="searchTerm ? 'No sessions matching your search' : 'No sessions found'"></h3>
            <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">
                <span x-show="searchTerm">Try adjusting your search terms</span>
                <span x-show="!searchTerm">Start a new chat to create a session</span>
            </p>
        </div>

        <!-- Table Header -->
        <table x-show="filteredSessions.length > 0"
               class="min-w-full divide-y divide-surface-200 dark:divide-surface-600">
            <thead class="bg-surface-100 dark:bg-surface-800">
            <tr>
                <th scope="col"
                    class="px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Session Info
                </th>
                <th scope="col"
                    class="px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Last Activity
                </th>
                <th scope="col"
                    class="px-6 py-3 text-right text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Actions
                </th>
            </tr>
            </thead>
            <tbody class="bg-white dark:bg-surface-700 divide-y divide-surface-200 dark:divide-surface-600">
            <template x-for="session in filteredSessions" :key="session.session_id">
                <tr class="hover:bg-surface-50 dark:hover:bg-surface-600">
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-start">
                            <div class="ml-2">
                                <div class="text-sm font-medium text-surface-900 dark:text-surface-100 flex items-center">
                                    <span x-text="session.title || 'Untitled Session'"></span>
                                </div>
                                <div class="text-xs font-mono text-surface-500 dark:text-surface-400 mt-1 truncate max-w-xs">
                                    <span x-text="session.session_id"></span>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-surface-700 dark:text-surface-300">
                        <div x-text="formatDate(session.last_message_date)"></div>
                        <div class="text-xs text-surface-500 dark:text-surface-400"
                             x-text="getTimeAgo(session.last_message_date)"></div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <a @click="viewSession(session.session_id)"
                           class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 cursor-pointer">
                            <iconify-icon icon="tabler:eye" class="mr-1" width="14" height="14"></iconify-icon>
                            View
                        </a>
                        <!-- Removed View Dump from here -->
                    </td>
                </tr>
            </template>
            </tbody>
        </table>

        <!-- Pagination -->
        <div x-show="filteredSessions.length > 0"
             class="bg-surface-50 dark:bg-surface-800 px-4 py-3 flex items-center justify-between border-t border-surface-200 dark:border-surface-600 sm:px-6">
            <div class="flex-1 flex justify-between items-center">
                <div>
                    <p class="text-sm text-surface-700 dark:text-surface-300">
                        Showing <span class="font-medium" x-text="(currentPage * pageSize) + 1"></span> to
                        <span class="font-medium"
                              x-text="Math.min((currentPage + 1) * pageSize, filteredSessions.length)"></span> of
                        <span class="font-medium" x-text="filteredSessions.length"></span> sessions
                    </p>
                </div>
                <div class="flex space-x-2">
                    <button @click="prevPage" :disabled="currentPage === 0"
                            class="relative inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed">
                        Previous
                    </button>
                    <button @click="nextPage" :disabled="(currentPage + 1) * pageSize >= filteredSessions.length"
                            class="relative inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed">
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('sessionListApp', () => ({
            // State
            sessions: [],
            filteredSessions: [],
            isLoading: true,
            error: null,
            searchTerm: '',
            currentPage: 0,
            pageSize: 20,
            wippyApi: null,
            navigateApi: null,

            // Initialization
            async initialize() {
                console.log('Initializing Session List App...');
                this.isLoading = true;

                try {
                    // Initialize Wippy API
                    if (typeof window.initWippyApi !== 'function') {
                        throw new Error("initWippyApi function not found");
                    }

                    this.wippyApi = await window.initWippyApi();

                    if (this.wippyApi?.iframe) {
                        this.navigateApi = this.wippyApi.iframe;
                        console.log('Wippy API and Navigation API initialized');
                    } else {
                        console.warn("Navigation API not available");
                        // Optionally disable buttons that rely on navigateApi if it's not found
                    }

                    // Load sessions
                    await this.loadSessions();

                } catch (err) {
                    console.error('Failed to initialize:', err);
                    this.error = `Initialization error: ${err.message}`;
                    this.isLoading = false;
                }
            },

            // Load sessions data
            async loadSessions() {
                this.isLoading = true;
                this.error = null;

                try {
                    console.log('Loading sessions...');

                    if (!this.wippyApi || !this.wippyApi.api) {
                        throw new Error("Wippy API not properly initialized for loading sessions.");
                    }

                    const response = await this.wippyApi.api.get('/api/v1/keeper/sessions', {
                        params: {limit: 100} // Consider making limit configurable or dynamic
                    });

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to load sessions');
                    }

                    this.sessions = response.data.sessions || [];
                    this.applyFilter(); // Initialize filtered sessions
                    console.log(`Loaded ${this.sessions.length} sessions`);

                } catch (err) {
                    console.error('Error loading sessions:', err);
                    this.error = `Failed to load sessions: ${err.message}`;
                    this.sessions = [];
                    this.filteredSessions = [];
                } finally {
                    this.isLoading = false;
                }
            },

            // Search and filtering
            applyFilter() {
                this.currentPage = 0; // Reset to first page when filtering

                if (!this.searchTerm) {
                    this.filteredSessions = [...this.sessions];
                    return;
                }

                const term = this.searchTerm.toLowerCase();
                this.filteredSessions = this.sessions.filter(session => {
                    return (
                        (session.title && session.title.toLowerCase().includes(term)) ||
                        (session.session_id && session.session_id.toLowerCase().includes(term))
                    );
                });
            },

            clearSearch() {
                this.searchTerm = '';
                this.applyFilter();
            },

            // Refresh sessions data
            refreshSessions() {
                this.loadSessions();
            },

            // Pagination
            prevPage() {
                if (this.currentPage > 0) {
                    this.currentPage--;
                }
            },

            nextPage() {
                if ((this.currentPage + 1) * this.pageSize < this.filteredSessions.length) {
                    this.currentPage++;
                }
            },

            // View specific session details
            viewSession(sessionId) {
                console.log(`Viewing session: ${sessionId}`);
                if (this.navigateApi) {
                    this.navigateApi.navigate('/c/keeper.views.session:view/' + sessionId);
                } else {
                    console.warn('Navigation API not available, cannot view session.');
                    alert('Navigation functionality is currently unavailable.');
                }
            },

            // Navigate to the generic session dump view page
            viewGenericDumpPage() {
                console.log(`Navigating to generic session dump view.`);
                if (this.navigateApi) {
                    this.navigateApi.navigate('/c/keeper.views.session:view/');
                } else {
                    console.warn('Navigation API not available, cannot view session dump page.');
                    alert('Navigation functionality is currently unavailable.');
                }
            },

            // Formatting helpers
            formatDate(dateString) {
                if (!dateString) return 'N/A';
                try {
                    const date = new Date(dateString);
                    return date.toLocaleString();
                } catch {
                    return dateString || 'N/A';
                }
            },

            getTimeAgo(dateString) {
                if (!dateString) return '';
                try {
                    const date = new Date(dateString);
                    const now = new Date();
                    const diffMs = now - date;
                    const diffSec = Math.floor(diffMs / 1000);

                    if (diffSec < 60) return 'just now';
                    const diffMin = Math.floor(diffSec / 60);
                    if (diffMin < 60) return `${diffMin}m ago`;
                    const diffHour = Math.floor(diffMin / 60);
                    if (diffHour < 24) return `${diffHour}h ago`;
                    const diffDay = Math.floor(diffHour / 24);
                    if (diffDay < 30) return `${diffDay}d ago`;
                    const diffMonth = Math.floor(diffDay / 30);
                    if (diffMonth < 12) return `${diffMonth}mo ago`;
                    const diffYear = Math.floor(diffMonth / 12);
                    return `${diffYear}y ago`;
                } catch {
                    return '';
                }
            }
        }));
    });
</script>
{{ end }}