{{ extends "/common/layout" }}

{* Page title and description *}
{{ block title() }}Process Information{{ end }}
{{ block metaDescription() }}View and edit process metadata and configuration{{ end }}

{{ block mainContent() }}
<div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden max-w-5xl mx-auto"
     x-data="processViewApp"
     x-init="initialize()"
     x-cloak>

    <!-- Page Header -->
    <div class="px-4 py-5 border-b border-surface-200 dark:border-surface-600 sm:px-6 flex justify-between items-center">
        <div class="flex items-center">
            <iconify-icon icon="tabler:settings-cog" class="text-3xl text-primary-600 dark:text-primary-400 mr-3 flex-shrink-0"></iconify-icon>
            <div>
                <h3 class="text-lg leading-6 font-medium text-surface-900 dark:text-surface-100">Process Information</h3>
                <p class="mt-1 text-sm text-surface-500 dark:text-surface-400"
                   x-show="processData?.id">
                    <span x-text="processData?.id ? getNamespace(processData.id) : ''"></span>:<span x-text="processData?.id ? getName(processData.id) : ''"></span>
                    <span class="ml-1">(Lua Process)</span>
                </p>
            </div>
        </div>
        <div class="flex space-x-3">
            <button
                    id="saveButton"
                    type="button"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    :disabled="isSaving || isLoading || !isDirty"
                    @click="saveProcessConfig()">
                <template x-if="isSaving">
                    <iconify-icon icon="tabler:loader" class="animate-spin mr-2" width="16" height="16"></iconify-icon>
                </template>
                <template x-if="!isSaving">
                    <iconify-icon icon="tabler:device-floppy" class="mr-2" width="16" height="16"></iconify-icon>
                </template>
                Save Changes
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="flex justify-center items-center py-12" x-show="isLoading">
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
        <span class="ml-3 text-surface-700 dark:text-surface-300">Loading process details...</span>
    </div>

    <!-- Error Indicator -->
    <div id="errorIndicator" class="px-4 py-12 sm:p-6 text-red-600 dark:text-red-400"
         x-show="!isLoading && loadError">
        <div class="flex flex-col items-center justify-center">
            <iconify-icon icon="tabler:alert-circle" class="mr-2" width="32" height="32"></iconify-icon>
            <p class="text-lg font-medium mt-2" x-text="loadError"></p>
            <button @click="initialize()"
                    class="mt-4 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700">
                <iconify-icon icon="tabler:refresh" class="mr-2" width="16" height="16"></iconify-icon>
                Retry
            </button>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="px-4 py-5 sm:p-6 space-y-6" x-show="!isLoading && !loadError && processData?.id">

        <!-- Description Section (Editable by default) -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:file-description" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Description</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Details and purpose of this Lua process. Changes are saved with the "Save Changes" button above.</p>
                </div>
            </div>
            <div class="mt-2 space-y-2">
                <textarea x-model="processData.meta.comment"
                          class="block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                          rows="4"
                          placeholder="Enter process description..."></textarea>
            </div>
        </div>

        <!-- Modules Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="processData?.data?.modules && processData.data.modules.length > 0">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:cube" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Required Modules</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Lua modules this process requires to function.</p>
                </div>
            </div>
            <div class="mt-2 flex flex-wrap gap-2">
                <template x-for="module in processData?.data?.modules || []" :key="module">
                    <span class="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-medium bg-surface-200 dark:bg-surface-600 text-surface-700 dark:text-surface-200">
                        <iconify-icon icon="tabler:cube" class="mr-1.5" width="14" height="14"></iconify-icon>
                        <span x-text="module"></span>
                    </span>
                </template>
            </div>
        </div>

        <!-- Dependencies Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="processData?.data?.imports && Object.keys(processData?.data?.imports || {}).length > 0">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:puzzle" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Dependencies</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Registry entries this process relies on.</p>
                </div>
            </div>
            <div class="mt-2 flex flex-wrap gap-2">
                <template x-for="(path, name) in processData?.data?.imports || {}" :key="name">
                    <a :href="getKeeperLink(path)"
                       @click.prevent="navigateToKeeper(path)"
                       class="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-medium bg-surface-200 dark:bg-surface-600 hover:bg-surface-300 dark:hover:bg-surface-500 text-surface-700 dark:text-surface-200 cursor-pointer">
                        <iconify-icon icon="tabler:external-link" class="mr-1.5" width="14" height="14"></iconify-icon>
                        <span x-text="name"></span>
                    </a>
                </template>
            </div>
        </div>

        <!-- Pool Configuration Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="processData?.data?.pool">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:stack-2" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Pool Configuration</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Settings for the Lua instance execution pool.</p>
                </div>
            </div>
            <div class="mt-2 grid grid-cols-1 sm:grid-cols-2 gap-x-6 gap-y-4 p-3 bg-white dark:bg-surface-700 rounded-md border border-surface-200 dark:border-surface-600">
                <div>
                    <p class="text-xs font-medium text-surface-500 dark:text-surface-400">Minimum Instances</p>
                    <p class="mt-1 text-sm text-surface-900 dark:text-surface-100" x-text="processData?.data?.pool?.min || '0'"></p>
                </div>
                <div>
                    <p class="text-xs font-medium text-surface-500 dark:text-surface-400">Maximum Instances</p>
                    <p class="mt-1 text-sm text-surface-900 dark:text-surface-100" x-text="processData?.data?.pool?.max || 'Unlimited'"></p>
                </div>
                <div>
                    <p class="text-xs font-medium text-surface-500 dark:text-surface-400">Idle Timeout</p>
                    <p class="mt-1 text-sm text-surface-900 dark:text-surface-100" x-text="processData?.data?.pool?.idle_timeout || 'Default'"></p>
                </div>
                <div>
                    <p class="text-xs font-medium text-surface-500 dark:text-surface-400">Warm-up Instances</p>
                    <p class="mt-1 text-sm text-surface-900 dark:text-surface-100" x-text="processData?.data?.pool?.warmup || '0'"></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Notification Section (Toast) -->
    <div x-data="{ notification: { show: false, type: 'success', message: '', timeout: null } }"
         @shownotification.window="
             notification.show = false;
             clearTimeout(notification.timeout);
             $nextTick(() => {
                 notification = { ...$event.detail, show: true };
                 notification.timeout = setTimeout(() => notification.show = false, 5000);
             });
         "
         x-show="notification.show"
         x-transition:enter="transform ease-out duration-300 transition"
         x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
         x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed bottom-4 right-4 max-w-sm w-full z-50">
        <div class="p-4 rounded-md shadow-lg"
             :class="{
                'bg-green-50 border border-green-200 dark:bg-green-900 dark:border-green-800': notification.type === 'success',
                'bg-red-50 border border-red-200 dark:bg-red-900 dark:border-red-800': notification.type === 'error',
                'bg-yellow-50 border border-yellow-200 dark:bg-yellow-900 dark:border-yellow-800': notification.type === 'warning'
             }">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <iconify-icon
                            :icon="notification.type === 'success' ? 'tabler:circle-check' : (notification.type === 'error' ? 'tabler:alert-circle' : 'tabler:alert-triangle')"
                            :class="{
                                'text-green-600 dark:text-green-400': notification.type === 'success',
                                'text-red-600 dark:text-red-400': notification.type === 'error',
                                'text-yellow-600 dark:text-yellow-400': notification.type === 'warning'
                            }"
                            width="20" height="20"></iconify-icon>
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium"
                       :class="{
                           'text-green-800 dark:text-green-200': notification.type === 'success',
                           'text-red-800 dark:text-red-200': notification.type === 'error',
                           'text-yellow-800 dark:text-yellow-200': notification.type === 'warning'
                       }"
                       x-text="notification.message"></p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button type="button" @click="notification.show = false; clearTimeout(notification.timeout);"
                            class="inline-flex rounded-md p-1 focus:outline-none focus:ring-2 focus:ring-offset-2"
                            :class="{
                                'text-green-500 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 focus:ring-green-600 dark:focus:ring-offset-green-900': notification.type === 'success',
                                'text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 focus:ring-red-600 dark:focus:ring-offset-red-900': notification.type === 'error',
                                'text-yellow-500 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300 focus:ring-yellow-600 dark:focus:ring-offset-yellow-900': notification.type === 'warning'
                            }">
                        <span class="sr-only">Close</span>
                        <iconify-icon icon="tabler:x" width="16" height="16"></iconify-icon>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('processViewApp', () => ({
            processData: null,
            originalProcessData: null,
            isLoading: true,
            loadError: null,
            isSaving: false,
            dataError: null,
            wippyApi: null,

            get isDirty() {
                if (!this.originalProcessData || !this.processData) return false;
                const commentChanged = this.originalProcessData.meta?.comment !== this.processData.meta?.comment;
                return commentChanged;
            },

            async initialize() {
                this.isLoading = true;
                this.loadError = null;
                this.isSaving = false;

                try {
                    if (typeof initWippyApi !== 'function') {
                        console.warn('Wippy API function not found. Using fallback for local testing.');
                        this.wippyApi = {
                            config: { path: new URLSearchParams(window.location.search).get('id') || 'fallback:my_process', feature: { routePrefix: '/apps' }, auth: { token: 'fallback-token' } },
                            iframe: {
                                navigate: (v, p) => console.log(`Fallback Nav: ${v}`, p || ''),
                                handleError: (type, err) => console.error(`Fallback Error Handler (${type}):`, err)
                            },
                            api: {
                                get: async (url) => {
                                    console.log('Fallback API GET:', url);
                                    if (url.includes('fallback:my_process')) {
                                        await new Promise(resolve => setTimeout(resolve, 500));
                                        return {
                                            data: {
                                                success: true,
                                                entry: {
                                                    id: 'app:background.worker',
                                                    kind: 'process.lua',
                                                    meta: { comment: 'Background worker process for handling asynchronous tasks' },
                                                    data: {
                                                        imports: { 'queue': 'app:lib.queue', 'logger': 'app:lib.logger' },
                                                        modules: ['json', 'http', 'base64'],
                                                        pool: { min: 2, max: 10, idle_timeout: '5m', warmup: 1 }
                                                    }
                                                }
                                            }
                                        };
                                    }
                                    return { data: { success: false, error: 'Not Found' } };
                                },
                                put: async (url, payload) => {
                                    console.log('Fallback API PUT:', url, payload);
                                    await new Promise(resolve => setTimeout(resolve, 300));
                                    const updatedEntry = JSON.parse(JSON.stringify(this.processData));
                                    if (!updatedEntry.meta) updatedEntry.meta = {};
                                    updatedEntry.meta.comment = payload.meta.comment;
                                    return { data: { success: true, entry: updatedEntry } };
                                }
                            }
                        };
                    } else {
                        this.wippyApi = await window.initWippyApi();
                    }

                    const entryId = this.wippyApi?.config?.path;
                    if (!entryId) {
                        throw new Error('No process ID provided in configuration.');
                    }
                    await this.loadProcess(entryId);
                } catch (err) {
                    console.error('Failed to initialize ProcessViewApp:', err);
                    this.loadError = `Initialization Error: ${err.message}`;
                    if (this.wippyApi && this.isFatalError(err)) {
                        this.wippyApi.iframe?.handleError('other', err);
                    }
                } finally {
                    this.isLoading = false;
                }
            },

            isFatalError(error) {
                return error.fatal === true ||
                    error.message?.includes('critical') ||
                    error.message?.includes('auth');
            },

            getNamespace(id) {
                if (!id || typeof id !== 'string') return '';
                const parts = id.split(':');
                return parts[0] || '';
            },

            getName(id) {
                if (!id || typeof id !== 'string') return '';
                const parts = id.split(':');
                return parts.length > 1 ? parts.slice(1).join(':') : (parts[0] || '');
            },

            getKeeperLink(id) {
                if(!id) return '#';
                return `${this.wippyApi?.config?.feature?.routePrefix || ''}/keeper/${id}`;
            },

            navigateToKeeper(id) {
                if (id && this.wippyApi?.iframe?.navigate) {
                    this.wippyApi.iframe.navigate(`/keeper/${id}`);
                } else if (id) {
                    console.warn('Navigation API not available. Falling back to href.');
                    window.location.href = this.getKeeperLink(id);
                }
            },

            async loadProcess(id) {
                this.isLoading = true;
                this.loadError = null;

                try {
                    const response = await this.wippyApi.api.get(`/api/v1/keeper/registry/entry?id=${encodeURIComponent(id)}`);
                    const data = response.data;

                    if (!data.success || !data.entry) {
                        throw new Error(data.error || 'Invalid server response loading process.');
                    }

                    const entry = data.entry;
                    // Defensive initialization
                    if (!entry.meta) entry.meta = { comment: '' };
                    if (typeof entry.meta.comment !== 'string') entry.meta.comment = String(entry.meta.comment || '');
                    if (!entry.data) entry.data = {};
                    if (!entry.data.imports) entry.data.imports = {};
                    if (!Array.isArray(entry.data.modules)) entry.data.modules = [];

                    this.processData = entry;
                    this.originalProcessData = JSON.parse(JSON.stringify(entry));

                } catch (error) {
                    console.error('Error loading process data:', error);
                    this.loadError = `Failed to load process: ${error.message}`;
                    if (error.response?.status === 401 || error.response?.status === 403) {
                        this.wippyApi.iframe?.handleError('auth-expired', error);
                    }
                } finally {
                    this.isLoading = false;
                }
            },

            async saveProcessConfig() {
                if (this.isSaving || !this.isDirty) {
                    if (!this.isDirty) this.showNotification('warning', 'No changes to save.');
                    return;
                }
                this.isSaving = true;
                this.dataError = null;

                try {
                    if (!this.processData?.id) {
                        throw new Error('Process ID is missing for save.');
                    }

                    const updatePayload = {
                        id: this.processData.id,
                        kind: this.processData.kind,
                        meta: {
                            comment: this.processData.meta.comment
                        },
                        merge: true
                    };

                    const response = await this.wippyApi.api.put(
                        `/api/v1/keeper/registry/entry?id=${encodeURIComponent(this.processData.id)}`,
                        updatePayload
                    );

                    const data = response.data;
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to save process data.');
                    }

                    const savedEntry = data.entry || this.processData;
                    if (!savedEntry.meta) savedEntry.meta = { comment: '' };
                    if (typeof savedEntry.meta.comment !== 'string') savedEntry.meta.comment = String(savedEntry.meta.comment || '');

                    this.processData = savedEntry;
                    this.originalProcessData = JSON.parse(JSON.stringify(savedEntry));

                    this.showNotification('success', 'Process configuration saved successfully.');

                } catch (error) {
                    console.error('Error saving process configuration:', error);
                    this.dataError = `Save Failed: ${error.message}`;
                    this.showNotification('error', `Save Failed: ${error.message}`);

                    if (error.response?.status === 401 || error.response?.status === 403) {
                        this.wippyApi.iframe?.handleError('auth-expired', error);
                    }
                } finally {
                    this.isSaving = false;
                }
            },

            showNotification(type, message) {
                window.dispatchEvent(new CustomEvent('shownotification', { detail: { type, message } }));
            }
        }));
    });
</script>
{{ end }}