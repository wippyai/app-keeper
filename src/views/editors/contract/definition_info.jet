{{ extends "/common/layout" }}

{* Page title and description *}
{{ block title() }}Contract Definition Information{{ end }}
{{ block metaDescription() }}View and edit contract definition metadata{{ end }}

{{ block mainContent() }}
<div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden max-w-5xl mx-auto"
     x-data="contractDefinitionApp"
     x-init="initialize()"
     x-cloak>

    <!-- Page Header -->
    <div class="px-4 py-5 border-b border-surface-200 dark:border-surface-600 sm:px-6 flex justify-between items-center">
        <div class="flex items-center">
            <iconify-icon icon="tabler:contract" class="text-3xl text-primary-600 dark:text-primary-400 mr-3 flex-shrink-0"></iconify-icon>
            <div>
                <h3 class="text-lg leading-6 font-medium text-surface-900 dark:text-surface-100">Contract Definition</h3>
                <p class="mt-1 text-sm text-surface-500 dark:text-surface-400"
                   x-show="contractData?.id">
                    <span x-text="getNamespace(contractData?.id)"></span>:<span x-text="getName(contractData?.id)"></span>
                    <span class="ml-1">(Contract Definition)</span>
                </p>
            </div>
        </div>
        <div class="flex space-x-3">
            <button
                    type="button"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    :disabled="isSaving || isLoading || !isDirty"
                    @click="saveMetadata()">
                <template x-if="isSaving">
                    <iconify-icon icon="tabler:loader" class="animate-spin mr-2" width="16" height="16"></iconify-icon>
                </template>
                <template x-if="!isSaving">
                    <iconify-icon icon="tabler:device-floppy" class="mr-2" width="16" height="16"></iconify-icon>
                </template>
                Save Changes
            </button>
        </div>
    </div>

    <!-- Loading/Error States -->
    <div class="flex justify-center items-center py-12" x-show="isLoading">
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
        <span class="ml-3 text-surface-700 dark:text-surface-300">Loading contract definition...</span>
    </div>

    <div class="px-4 py-12 sm:p-6 text-red-600 dark:text-red-400" x-show="!isLoading && loadError">
        <div class="flex flex-col items-center justify-center">
            <iconify-icon icon="tabler:alert-circle" width="32" height="32"></iconify-icon>
            <p class="text-lg font-medium mt-2" x-text="loadError"></p>
            <button @click="initialize()"
                    class="mt-4 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700">
                <iconify-icon icon="tabler:refresh" class="mr-2" width="16" height="16"></iconify-icon>
                Retry
            </button>
        </div>
    </div>

    <!-- Main Content -->
    <div class="px-4 py-5 sm:p-6 space-y-6" x-show="!isLoading && !loadError && contractData?.id">

        <!-- Metadata Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:file-description" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Description</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Details and purpose of this contract definition</p>
                </div>
            </div>
            <div class="mt-2">
                <textarea x-model="contractData.meta.comment"
                          @input="markDirty()"
                          class="block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                          rows="4"
                          placeholder="Enter contract description..."
                          :disabled="isLoading || isSaving"></textarea>
            </div>
        </div>

        <!-- Tags Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:tags" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Tags</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Comma-separated tags for categorization</p>
                </div>
            </div>
            <div class="mt-2">
                <input type="text" x-model="tagsInput"
                       @input="updateTagsFromInput()"
                       class="block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                       placeholder="tag1, tag2, tag3"
                       :disabled="isLoading || isSaving">
                <div class="mt-2 flex flex-wrap gap-1" x-show="contractData.meta.tags && contractData.meta.tags.length > 0">
                    <template x-for="tag in contractData.meta.tags" :key="tag">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 text-primary-800 dark:bg-primary-800 dark:text-primary-200">
                            <span x-text="tag"></span>
                        </span>
                    </template>
                </div>
            </div>
        </div>

        <!-- Contract Methods (Read-Only) -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:code" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Contract Methods</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Methods defined in this contract (read-only)</p>
                </div>
            </div>
            <div class="mt-4 space-y-4" x-show="contractData.data && contractData.data.methods && contractData.data.methods.length > 0">
                <template x-for="method in contractData.data.methods" :key="method.name">
                    <div class="bg-white dark:bg-surface-700 rounded-md border border-surface-200 dark:border-surface-600 p-4">
                        <div class="flex items-center justify-between mb-2">
                            <h5 class="text-sm font-semibold text-surface-900 dark:text-surface-100" x-text="method.name"></h5>
                            <span class="px-2 py-1 text-xs bg-surface-200 dark:bg-surface-600 rounded-md text-surface-700 dark:text-surface-300">Method</span>
                        </div>
                        <p class="text-xs text-surface-600 dark:text-surface-400 mb-2" x-text="method.description || 'No description'"></p>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-3 text-xs">
                            <div>
                                <span class="font-medium text-surface-700 dark:text-surface-300">Input Schemas:</span>
                                <span class="text-surface-600 dark:text-surface-400" x-text="(method.input_schemas && method.input_schemas.length) ? method.input_schemas.length + ' defined' : 'None'"></span>
                            </div>
                            <div>
                                <span class="font-medium text-surface-700 dark:text-surface-300">Output Schemas:</span>
                                <span class="text-surface-600 dark:text-surface-400" x-text="(method.output_schemas && method.output_schemas.length) ? method.output_schemas.length + ' defined' : 'None'"></span>
                            </div>
                        </div>
                    </div>
                </template>
            </div>
            <div x-show="!contractData.data || !contractData.data.methods || contractData.data.methods.length === 0"
                 class="text-center py-6 text-surface-500 dark:text-surface-400">
                <iconify-icon icon="tabler:code-off" class="text-2xl mb-2"></iconify-icon>
                <p class="text-sm">No methods defined in this contract</p>
            </div>
        </div>
    </div>

    <!-- Notifications -->
    <div x-data="{ notification: { show: false, type: 'success', message: '', timeout: null } }"
         @shownotification.window="
             notification.show = false;
             clearTimeout(notification.timeout);
             $nextTick(() => {
                 notification = { ...$event.detail, show: true };
                 notification.timeout = setTimeout(() => notification.show = false, 5000);
             });
         "
         x-show="notification.show"
         x-transition:enter="transform ease-out duration-300 transition"
         x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
         x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed bottom-4 right-4 max-w-sm w-full z-50">
        <div class="p-4 rounded-md shadow-lg"
             :class="{
                'bg-green-50 border border-green-200 dark:bg-green-900 dark:border-green-800': notification.type === 'success',
                'bg-red-50 border border-red-200 dark:bg-red-900 dark:border-red-800': notification.type === 'error',
                'bg-yellow-50 border border-yellow-200 dark:bg-yellow-900 dark:border-yellow-800': notification.type === 'warning'
             }">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <iconify-icon
                            :icon="notification.type === 'success' ? 'tabler:circle-check' : (notification.type === 'error' ? 'tabler:alert-circle' : 'tabler:alert-triangle')"
                            :class="{
                                'text-green-600 dark:text-green-400': notification.type === 'success',
                                'text-red-600 dark:text-red-400': notification.type === 'error',
                                'text-yellow-600 dark:text-yellow-400': notification.type === 'warning'
                            }"
                            width="20" height="20"></iconify-icon>
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium"
                       :class="{
                           'text-green-800 dark:text-green-200': notification.type === 'success',
                           'text-red-800 dark:text-red-200': notification.type === 'error',
                           'text-yellow-800 dark:text-yellow-200': notification.type === 'warning'
                       }"
                       x-text="notification.message"></p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button type="button" @click="notification.show = false; clearTimeout(notification.timeout);"
                            class="inline-flex rounded-md p-1 focus:outline-none focus:ring-2 focus:ring-offset-2"
                            :class="{
                                'text-green-500 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 focus:ring-green-600': notification.type === 'success',
                                'text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 focus:ring-red-600': notification.type === 'error',
                                'text-yellow-500 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300 focus:ring-yellow-600': notification.type === 'warning'
                            }">
                        <span class="sr-only">Close</span>
                        <iconify-icon icon="tabler:x" width="16" height="16"></iconify-icon>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('contractDefinitionApp', () => ({
            contractData: null,
            originalData: null,
            isLoading: true,
            loadError: null,
            isSaving: false,
            tagsInput: '',
            wippyApi: null,

            get isDirty() {
                if (!this.originalData || !this.contractData) return false;
                return JSON.stringify(this.originalData.meta) !== JSON.stringify(this.contractData.meta);
            },

            async initialize() {
                this.isLoading = true;
                this.loadError = null;

                try {
                    if (typeof initWippyApi !== 'function') {
                        this.wippyApi = this.createFallbackApi();
                    } else {
                        this.wippyApi = await window.initWippyApi();
                    }

                    const entryId = this.wippyApi?.config?.path;
                    if (!entryId) {
                        throw new Error('No contract ID provided.');
                    }

                    await this.loadContract(entryId);
                } catch (err) {
                    console.error('Initialization failed:', err);
                    this.loadError = `Initialization error: ${err.message}`;
                } finally {
                    this.isLoading = false;
                }
            },

            createFallbackApi() {
                const fallbackId = new URLSearchParams(window.location.search).get('id') || 'app.kb:query_service';
                return {
                    config: { path: fallbackId },
                    api: {
                        get: async (url) => {
                            await new Promise(resolve => setTimeout(resolve, 500));
                            return {
                                data: {
                                    success: true,
                                    entry: {
                                        id: fallbackId,
                                        kind: 'contract.definition',
                                        meta: {
                                            comment: 'Knowledge base semantic query and search service',
                                            tags: ['knowledge', 'search', 'semantic']
                                        },
                                        data: {
                                            methods: [
                                                {
                                                    name: 'query',
                                                    description: 'Search knowledge base content using semantic similarity',
                                                    input_schemas: [{ format: 'application/schema+json' }],
                                                    output_schemas: [{ format: 'application/schema+json' }]
                                                }
                                            ]
                                        }
                                    }
                                }
                            };
                        },
                        put: async (url, payload) => {
                            await new Promise(resolve => setTimeout(resolve, 300));
                            return { data: { success: true, message: 'Contract definition updated successfully' } };
                        }
                    }
                };
            },

            async loadContract(id) {
                try {
                    const response = await this.wippyApi.api.get(`/api/v1/keeper/registry/entry?id=${encodeURIComponent(id)}`);
                    if (!response.data.success || !response.data.entry) {
                        throw new Error(response.data.error || 'Failed to load contract definition.');
                    }

                    this.contractData = response.data.entry;
                    if (!this.contractData.meta) this.contractData.meta = {};
                    if (!this.contractData.meta.tags) this.contractData.meta.tags = [];

                    this.tagsInput = (this.contractData.meta.tags || []).join(', ');
                    this.originalData = JSON.parse(JSON.stringify(this.contractData));
                } catch (error) {
                    console.error('Error loading contract:', error);
                    this.loadError = `Failed to load contract: ${error.message}`;
                }
            },

            markDirty() {
                // Trigger reactivity
            },

            updateTagsFromInput() {
                const tags = this.tagsInput
                    .split(',')
                    .map(tag => tag.trim())
                    .filter(tag => tag.length > 0);
                this.contractData.meta.tags = tags;
                this.markDirty();
            },

            async saveMetadata() {
                if (!this.isDirty || this.isSaving) return;

                this.isSaving = true;
                try {
                    const payload = {
                        id: this.contractData.id,
                        kind: this.contractData.kind,
                        meta: this.contractData.meta,
                        merge: true
                    };

                    const response = await this.wippyApi.api.put(
                        `/api/v1/keeper/registry/entry?id=${encodeURIComponent(this.contractData.id)}`,
                        payload
                    );

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to save contract definition.');
                    }

                    this.originalData = JSON.parse(JSON.stringify(this.contractData));
                    this.showNotification('success', 'Contract definition metadata saved successfully.');
                } catch (error) {
                    console.error('Error saving contract:', error);
                    this.showNotification('error', `Save failed: ${error.message}`);
                } finally {
                    this.isSaving = false;
                }
            },

            getNamespace(id) {
                return (id || '').split(':')[0] || '';
            },

            getName(id) {
                const parts = (id || '').split(':');
                return parts.length > 1 ? parts.slice(1).join(':') : (parts[0] || '');
            },

            showNotification(type, message) {
                window.dispatchEvent(new CustomEvent('shownotification', { detail: { type, message } }));
            }
        }));
    });
</script>
{{ end }}
