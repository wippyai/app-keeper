{{ extends "/common/layout" }}

{* Page title and description *}
{{ block title() }}S3 Cloud Storage{{ end }}
{{ block metaDescription() }}View and edit S3 cloud storage configuration{{ end }}

{{ block mainContent() }}
<div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden max-w-5xl mx-auto"
     x-data="s3ConfigApp"
     x-init="initialize()"
     x-cloak>

    <!-- Page Header -->
    <div class="px-4 py-5 border-b border-surface-200 dark:border-surface-600 sm:px-6 flex justify-between items-center">
        <div class="flex items-center">
            <iconify-icon icon="tabler:cloud-upload" class="text-3xl text-primary-600 dark:text-primary-400 mr-3 flex-shrink-0"></iconify-icon>
            <div>
                <h3 class="text-lg leading-6 font-medium text-surface-900 dark:text-surface-100">S3 Cloud Storage</h3>
                <p class="mt-1 text-sm text-surface-500 dark:text-surface-400"
                   x-show="entry?.id">
                    <span x-text="getNamespace(entry?.id)"></span>:<span x-text="getName(entry?.id)"></span>
                    <span class="ml-1">(Cloud Storage)</span>
                </p>
            </div>
        </div>
        <div class="flex space-x-3">
            <button
                    id="saveButton"
                    type="button"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    :disabled="isSaving || isLoading || !isDirty || !!bucketError"
                    @click="saveEntry()">
                <template x-if="isSaving">
                    <iconify-icon icon="tabler:loader" class="animate-spin mr-2" width="16" height="16"></iconify-icon>
                </template>
                <template x-if="!isSaving">
                    <iconify-icon icon="tabler:device-floppy" class="mr-2" width="16" height="16"></iconify-icon>
                </template>
                Save Changes
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="flex justify-center items-center py-12" x-show="isLoading">
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
        <span class="ml-3 text-surface-700 dark:text-surface-300">Loading S3 storage configuration...</span>
    </div>

    <!-- Error Indicator -->
    <div id="errorIndicator" class="px-4 py-12 sm:p-6 text-red-600 dark:text-red-400"
         x-show="!isLoading && loadError">
        <div class="flex flex-col items-center justify-center">
            <iconify-icon icon="tabler:alert-circle" class="mr-2" width="32" height="32"></iconify-icon>
            <p class="text-lg font-medium mt-2" x-text="loadError"></p>
            <button @click="initialize()"
                    class="mt-4 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700">
                <iconify-icon icon="tabler:refresh" class="mr-2" width="16" height="16"></iconify-icon>
                Retry
            </button>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="px-4 py-5 sm:p-6 space-y-6" x-show="!isLoading && !loadError && entry">

        <!-- Description Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:file-description" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Description</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Details and purpose of this S3 storage configuration.</p>
                </div>
            </div>
            <div class="mt-2">
                <textarea
                        :value="entry?.meta?.comment || ''"
                        @input="updateComment($event.target.value)"
                        class="block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                        rows="4"
                        placeholder="Enter storage configuration description..."
                        :disabled="isLoading || isSaving"></textarea>
            </div>
        </div>

        <!-- S3 Core Configuration Section (Bucket, Endpoint) -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:bucket" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">S3 Bucket & Endpoint</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Core S3 storage parameters.</p>
                </div>
            </div>

            <div class="mt-3 space-y-4">
                <!-- S3 Bucket Name -->
                <div>
                    <label for="bucketName" class="block text-sm font-medium text-surface-700 dark:text-surface-300">Bucket Name</label>
                    <div class="mt-1 relative rounded-md shadow-sm">
                        <input type="text" id="bucketName"
                               :value="entry?.data?.bucket || ''"
                               @input="updateBucket($event.target.value)"
                               class="block w-full border rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                               :class="{'border-red-300 dark:border-red-500 focus:ring-red-500 focus:border-red-500': bucketError, 'border-surface-300 dark:border-surface-600': !bucketError}"
                               placeholder="my-bucket-name"
                               :disabled="isLoading || isSaving">
                    </div>
                    <div class="mt-1 flex items-center justify-between">
                        <p class="text-xs text-surface-500 dark:text-surface-400">
                            The name of your S3 bucket. Must be globally unique.
                        </p>
                        <p x-show="bucketError" class="text-xs text-red-600 dark:text-red-400" x-text="bucketError"></p>
                    </div>
                </div>

                <!-- Custom Endpoint (Optional) -->
                <div>
                    <label for="endpoint" class="block text-sm font-medium text-surface-700 dark:text-surface-300">Custom Endpoint (Optional)</label>
                    <input type="text" id="endpoint"
                           :value="entry?.data?.endpoint || ''"
                           @input="updateEndpoint($event.target.value)"
                           class="mt-1 block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="https://custom-s3-endpoint.example.com"
                           :disabled="isLoading || isSaving">
                    <p class="mt-1 text-xs text-surface-500 dark:text-surface-400">
                        Optional custom endpoint for S3-compatible storage services (leave empty for AWS S3).
                    </p>
                </div>
            </div>
        </div>

        <!-- AWS Configuration Reference Section (Display Only) -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:cloud-aws" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">AWS Configuration Reference</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Link to an AWS configuration entry. This field is not editable here.</p>
                </div>
            </div>

            <div class="mt-2">
                <div x-show="getAwsConfigFullId()" class="p-3 bg-white dark:bg-surface-700 rounded-md border border-surface-200 dark:border-surface-600">
                    <p class="text-xs font-medium text-surface-500 dark:text-surface-400 mb-1">AWS Config:</p>
                    <a :href="getKeeperLink(getAwsConfigFullId())"
                       class="text-sm text-primary-600 dark:text-primary-400 hover:underline flex items-center"
                       @click.prevent="navigateToAwsConfig(getAwsConfigFullId())">
                        <iconify-icon icon="tabler:cloud-cog" class="mr-1.5 flex-shrink-0" width="16" height="16"></iconify-icon>
                        <span class="truncate" x-text="getAwsConfigFullId()"></span>
                    </a>
                </div>
                <div x-show="!getAwsConfigFullId() && entry?.data?.config && configError" class="p-3 bg-white dark:bg-surface-700 rounded-md border border-red-300 dark:border-red-500">
                    <p class="text-sm text-red-600 dark:text-red-400">
                        <iconify-icon icon="tabler:alert-circle" class="inline-block mr-1 align-text-bottom" width="16" height="16"></iconify-icon>
                        AWS Configuration ID (<span class="font-mono" x-text="entry.data.config"></span>) is malformed.
                    </p>
                </div>
                <div x-show="!entry?.data?.config" class="p-3 bg-white dark:bg-surface-700 rounded-md border border-surface-200 dark:border-surface-600">
                    <p class="text-sm text-surface-500 dark:text-surface-400">No AWS Configuration reference set.</p>
                </div>
            </div>
        </div>

        <!-- Direct Credentials Section (Optional) -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:key" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Direct Credentials (Optional)</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">
                        Specify environment variables for credentials. These are used if an AWS Configuration Reference is not provided or if that reference doesn't contain credentials.
                    </p>
                </div>
            </div>
            <div class="mt-3 space-y-4">
                <!-- Access Key ID Environment Variable -->
                <div>
                    <label for="accessKeyIdEnv" class="block text-sm font-medium text-surface-700 dark:text-surface-300">Access Key ID Environment Variable</label>
                    <input type="text" id="accessKeyIdEnv"
                           :value="entry?.data?.access_key_id_env || ''"
                           @input="updateAccessKeyIdEnv($event.target.value)"
                           class="mt-1 block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="AWS_ACCESS_KEY_ID"
                           :disabled="isLoading || isSaving">
                    <p class="mt-1 text-xs text-surface-500 dark:text-surface-400">
                        The environment variable name that contains your AWS access key ID.
                    </p>
                </div>

                <!-- Secret Access Key Environment Variable -->
                <div>
                    <label for="secretAccessKeyEnv" class="block text-sm font-medium text-surface-700 dark:text-surface-300">Secret Access Key Environment Variable</label>
                    <input type="text" id="secretAccessKeyEnv"
                           :value="entry?.data?.secret_access_key_env || ''"
                           @input="updateSecretAccessKeyEnv($event.target.value)"
                           class="mt-1 block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="AWS_SECRET_ACCESS_KEY"
                           :disabled="isLoading || isSaving">
                    <p class="mt-1 text-xs text-surface-500 dark:text-surface-400">
                        The environment variable name that contains your AWS secret access key.
                    </p>
                </div>

                <!-- Security Notice -->
                <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-900/30 rounded-md border border-blue-200 dark:border-blue-800">
                    <div class="flex">
                        <div class="flex-shrink-0">
                            <iconify-icon icon="tabler:info-circle" class="text-blue-600 dark:text-blue-400" width="20" height="20"></iconify-icon>
                        </div>
                        <div class="ml-3">
                            <p class="text-sm text-blue-700 dark:text-blue-300">
                                <strong>Security Notice:</strong> This configuration stores only environment variable names, not the actual AWS credentials. Ensure that these environment variables are properly set in your deployment environment.
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Toast (Identical to previous, so omitted for brevity but should be included) -->
    <div x-data="{ notification: { show: false, type: 'success', message: '', timeout: null } }"
         @shownotification.window="
             notification.show = false;
             clearTimeout(notification.timeout);
             $nextTick(() => {
                 notification = { ...$event.detail, show: true };
                 notification.timeout = setTimeout(() => notification.show = false, 5000);
             });
         "
         x-show="notification.show"
         x-transition:enter="transform ease-out duration-300 transition"
         x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
         x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed bottom-4 right-4 max-w-sm w-full z-50">
        <div class="p-4 rounded-md shadow-lg"
             :class="{
                'bg-green-50 border border-green-200 dark:bg-green-900 dark:border-green-800': notification.type === 'success',
                'bg-red-50 border border-red-200 dark:bg-red-900 dark:border-red-800': notification.type === 'error',
                'bg-yellow-50 border border-yellow-200 dark:bg-yellow-900 dark:border-yellow-800': notification.type === 'warning'
             }">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <iconify-icon
                            :icon="notification.type === 'success' ? 'tabler:circle-check' : (notification.type === 'error' ? 'tabler:alert-circle' : 'tabler:alert-triangle')"
                            :class="{
                                'text-green-600 dark:text-green-400': notification.type === 'success',
                                'text-red-600 dark:text-red-400': notification.type === 'error',
                                'text-yellow-600 dark:text-yellow-400': notification.type === 'warning'
                            }"
                            width="20" height="20"></iconify-icon>
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium"
                       :class="{
                           'text-green-800 dark:text-green-200': notification.type === 'success',
                           'text-red-800 dark:text-red-200': notification.type === 'error',
                           'text-yellow-800 dark:text-yellow-200': notification.type === 'warning'
                       }"
                       x-text="notification.message"></p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button type="button" @click="notification.show = false; clearTimeout(notification.timeout);"
                            class="inline-flex rounded-md p-1 focus:outline-none focus:ring-2 focus:ring-offset-2"
                            :class="{
                                'text-green-500 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 focus:ring-green-600 dark:focus:ring-offset-green-900': notification.type === 'success',
                                'text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 focus:ring-red-600 dark:focus:ring-offset-red-900': notification.type === 'error',
                                'text-yellow-500 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300 focus:ring-yellow-600 dark:focus:ring-offset-yellow-900': notification.type === 'warning'
                            }">
                        <span class="sr-only">Close</span>
                        <iconify-icon icon="tabler:x" width="16" height="16"></iconify-icon>
                    </button>
                </div>
            </div>
        </div>
    </div>

</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('s3ConfigApp', () => ({
            entry: null,
            originalEntry: null,
            isLoading: true,
            loadError: null,
            isSaving: false,
            bucketError: null,
            configError: null, // Stores error if loaded config ID is malformed

            dirtyFields: {
                comment: false,
                bucket: false,
                endpoint: false,
                accessKeyIdEnv: false,
                secretAccessKeyEnv: false
            },
            wippyApi: null,

            async initialize() {
                this.isLoading = true; this.loadError = null; this.resetState();
                try {
                    if (typeof initWippyApi !== 'function') {
                        this.wippyApi = this.createFallbackWippyApi();
                    } else {
                        this.wippyApi = await window.initWippyApi();
                    }
                    const entryId = this.wippyApi?.config?.path;
                    if (!entryId) throw new Error('No S3 storage ID provided');
                    await this.loadEntry(entryId);
                } catch (err) {
                    this.loadError = `Initialization error: ${err.message}`;
                    if (this.wippyApi && this.isFatalError(err)) {
                        this.wippyApi.iframe?.handleError('other', err);
                    }
                } finally { this.isLoading = false; }
            },

            resetState() {
                this.entry = null; this.originalEntry = null;
                this.bucketError = null; this.configError = null;
                this.dirtyFields = { comment: false, bucket: false, endpoint: false, accessKeyIdEnv: false, secretAccessKeyEnv: false };
            },

            createFallbackWippyApi() {
                const fallbackId = new URLSearchParams(window.location.search).get('id') || 's3ns:my_s3_config';
                let exampleConfig = 'awsns:main_aws_config'; // Default valid config
                if (fallbackId.includes('no_aws_config')) {
                    exampleConfig = '';
                } else if (fallbackId.includes('short_aws_config')) {
                    exampleConfig = 'short_name_no_ns'; // Will be prefixed by s3ns
                } else if (fallbackId.includes('invalid_aws_config')) {
                    exampleConfig = 'malformed'; // Will cause configError
                }
                return {
                    config: { path: fallbackId, feature: { routePrefix: '/apps' } },
                    iframe: { navigate: (v, p) => console.log(`Fallback Nav: ${v}`, p || '') },
                    api: {
                        get: async () => ({
                            data: { success: true, entry: {
                                    id: fallbackId, kind: 'cloudstorage.s3',
                                    meta: { comment: `S3 config ${fallbackId}` },
                                    data: { bucket: 'fallback-bucket', config: exampleConfig }
                                }}
                        }),
                        put: async (url, payload) => {
                            console.log('Fallback API PUT:', url, payload);
                            const updatedEntry = JSON.parse(JSON.stringify(this.entry));
                            updatedEntry.meta.comment = payload.meta.comment;
                            updatedEntry.data = { ...payload.data }; // Use payload.data directly
                            this.entry = updatedEntry;
                            this.originalEntry = JSON.parse(JSON.stringify(this.entry));
                            this.resetDirtyFlagsForSave();
                            return { data: { success: true, entry: updatedEntry }};
                        }
                    }
                };
            },

            resetDirtyFlagsForSave() {
                this.dirtyFields = { comment: false, bucket: false, endpoint: false, accessKeyIdEnv: false, secretAccessKeyEnv: false };
            },

            isFatalError: (error) => error.fatal === true || error.message?.includes('critical') || error.message?.includes('auth'),
            getNamespace: (id) => (id && typeof id === 'string' ? id.split(':')[0] || '' : ''),
            getName: (id) => (id && typeof id === 'string' ? (id.split(':').length > 1 ? id.split(':').slice(1).join(':') : (id.split(':')[0] || '')) : ''),
            getKeeperLink: (id) => (id ? `${this.wippyApi?.config?.feature?.routePrefix || ''}/keeper/${id}` : '#'),

            getAwsConfigFullId() {
                const configId = this.entry?.data?.config;
                if (!configId || typeof configId !== 'string' || configId.trim() === '') return '';

                if (configId.includes(':')) {
                    return configId;
                }
                // If no namespace, prepend current entry's namespace
                const currentEntryNs = this.getNamespace(this.entry?.id);
                if (currentEntryNs) {
                    return `${currentEntryNs}:${configId}`;
                }
                return configId; // Should ideally not happen if entry.id has a namespace
            },

            navigateToAwsConfig(resolvedConfigId) { // Expects already resolved ID
                if (resolvedConfigId && this.wippyApi?.iframe?.navigate) {
                    this.wippyApi.iframe.navigate(`/keeper/${resolvedConfigId}`);
                } else if (resolvedConfigId) {
                    window.location.href = this.getKeeperLink(resolvedConfigId);
                }
            },

            async loadEntry(id) {
                this.isLoading = true; this.loadError = null;
                try {
                    const response = await this.wippyApi.api.get(`/api/v1/keeper/registry/entry?id=${encodeURIComponent(id)}`);
                    const data = response.data;
                    if (!data.success || !data.entry) throw new Error(data.error || 'Invalid server response');

                    this.entry = data.entry;
                    if (!this.entry.meta) this.entry.meta = {};
                    if (!this.entry.data) this.entry.data = {};

                    this.validateBucket(this.entry.data.bucket);
                    this.validateConfigFormat(this.entry.data.config); // Validate format of loaded config

                    this.originalEntry = JSON.parse(JSON.stringify(this.entry));
                    this.resetDirtyFlagsForSave();
                } catch (error) {
                    this.loadError = `Failed to load: ${error.message}`;
                } finally { this.isLoading = false; }
            },

            updateComment(value) { this.entry.meta.comment = value; this.dirtyFields.comment = true; },
            updateBucket(value) { this.entry.data.bucket = value; this.dirtyFields.bucket = true; this.validateBucket(value); },
            updateEndpoint(value) { this.entry.data.endpoint = value; this.dirtyFields.endpoint = true; },
            updateAccessKeyIdEnv(value) { this.entry.data.access_key_id_env = value; this.dirtyFields.accessKeyIdEnv = true; },
            updateSecretAccessKeyEnv(value) { this.entry.data.secret_access_key_env = value; this.dirtyFields.secretAccessKeyEnv = true; },

            validateBucket(bucket) {
                this.bucketError = null;
                if (!bucket || bucket.trim() === '') { this.bucketError = 'Bucket name is required'; return false; }
                if (bucket.length < 3 || bucket.length > 63) { this.bucketError = 'Must be 3-63 chars'; return false; }
                if (!/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(bucket) || bucket.includes('..') || bucket.match(/(\d{1,3}\.){3}\d{1,3}/)) {
                    this.bucketError = 'Invalid format or chars'; return false;
                }
                return true;
            },

            validateConfigFormat(configIdValue) { // Validates the format of a given config ID value
                this.configError = null;
                if (!configIdValue || typeof configIdValue !== 'string' || configIdValue.trim() === '') {
                    return true; // Empty is fine, means not set
                }
                // A resolved ID must contain a colon. The original value might not.
                // Here, we check the raw value from data. If it's not empty and has no colon, it's fine,
                // as getAwsConfigFullId will resolve it. If it *has* a colon but is malformed, that's an issue.
                // Or if it's just some random string without a colon that also doesn't make sense if not empty.
                // Essentially, if non-empty, it should look like 'name' or 'ns:name'.
                if (configIdValue.includes(':')) { // If it has a colon, it must be `ns:name` like
                    const parts = configIdValue.split(':');
                    if (parts.length !== 2 || !parts[0].trim() || !parts[1].trim()) {
                        this.configError = 'Malformed ID with namespace.';
                        return false;
                    }
                } else { // No colon, must be just a name part
                    if (configIdValue.includes(' ') || configIdValue.trim().length === 0) { // Simple check for invalid chars if no namespace
                        this.configError = 'Malformed ID (no namespace).';
                        return false;
                    }
                }
                return true;
            },

            async saveEntry() {
                if (this.isSaving || !this.isDirty) {
                    if (!this.isDirty) this.showNotification('warning', 'No changes to save'); return;
                }
                if (!this.validateBucket(this.entry?.data?.bucket)) {
                    this.showNotification('error', 'Fix bucket validation errors'); return;
                }
                if (!this.entry) { this.showNotification('error', 'No entry data'); return; }

                this.isSaving = true;
                try {
                    const updatePayload = {
                        id: this.entry.id, kind: this.entry.kind,
                        meta: { comment: this.entry.meta.comment || '' },
                        data: {
                            bucket: this.entry.data.bucket,
                            config: this.entry.data.config || '', // Send original/loaded config value
                            endpoint: this.entry.data.endpoint || '',
                            access_key_id_env: this.entry.data.access_key_id_env || '',
                            secret_access_key_env: this.entry.data.secret_access_key_env || ''
                        },
                        merge: true
                    };

                    const response = await this.wippyApi.api.put(
                        `/api/v1/keeper/registry/entry?id=${encodeURIComponent(this.entry.id)}`,
                        updatePayload
                    );
                    if (!response.data.success) throw new Error(response.data.error || 'Failed to save');

                    const savedEntry = response.data.entry || JSON.parse(JSON.stringify(this.entry));
                    this.entry = savedEntry;
                    if (!this.entry.meta) this.entry.meta = {};
                    if (!this.entry.data) this.entry.data = {};
                    this.validateConfigFormat(this.entry.data.config); // Re-validate format after save

                    this.originalEntry = JSON.parse(JSON.stringify(this.entry));
                    this.resetDirtyFlagsForSave();
                    this.showNotification('success', 'S3 config saved');
                } catch (error) {
                    this.showNotification('error', `Save Failed: ${error.message}`);
                } finally { this.isSaving = false; }
            },

            get isDirty() { return Object.values(this.dirtyFields).some(Boolean); },
            showNotification(type, message) { window.dispatchEvent(new CustomEvent('shownotification', { detail: { type, message } }));}
        }));
    });
</script>
{{ end }}