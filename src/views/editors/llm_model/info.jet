{{ extends "/common/layout" }}

{* Page title and description *}
{{ block title() }}LLM Model Information{{ end }}
{{ block metaDescription() }}View and edit LLM model configuration{{ end }}

{{ block mainContent() }}
<div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden max-w-5xl mx-auto"
     x-data="modelViewApp"
     x-init="initialize()"
     x-cloak>

    <!-- Page Header -->
    <div class="px-4 py-5 border-b border-surface-200 dark:border-surface-600 sm:px-6 flex justify-between items-center">
        <div class="flex items-center">
            <iconify-icon icon="tabler:brain" class="text-3xl text-primary-600 dark:text-primary-400 mr-3 flex-shrink-0"></iconify-icon>
            <div>
                <h3 class="text-lg leading-6 font-medium text-surface-900 dark:text-surface-100">LLM Model Information</h3>
                <p class="mt-1 text-sm text-surface-500 dark:text-surface-400"
                   x-show="modelData?.id">
                    <span x-text="modelData?.id ? getNamespace(modelData.id) : ''"></span>:<span x-text="modelData?.id ? getName(modelData.id) : ''"></span>
                    <span class="ml-1" x-text="'(' + (modelData?.meta?.type || 'llm.model') + ')'"></span>
                </p>
            </div>
        </div>
        <div class="flex space-x-3">
            <button
                    id="saveButton"
                    type="button"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    :disabled="isSaving || isLoading || !isDirty"
                    @click="saveComment()">
                <template x-if="isSaving">
                    <iconify-icon icon="tabler:loader" class="animate-spin mr-2" width="16" height="16"></iconify-icon>
                </template>
                <template x-if="!isSaving">
                    <iconify-icon icon="tabler:device-floppy" class="mr-2" width="16" height="16"></iconify-icon>
                </template>
                Save Changes
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="flex justify-center items-center py-12" x-show="isLoading">
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
        <span class="ml-3 text-surface-700 dark:text-surface-300">Loading model details...</span>
    </div>

    <!-- Error Indicator -->
    <div id="errorIndicator" class="px-4 py-12 sm:p-6 text-red-600 dark:text-red-400"
         x-show="!isLoading && loadError">
        <div class="flex flex-col items-center justify-center">
            <iconify-icon icon="tabler:alert-circle" class="mr-2" width="32" height="32"></iconify-icon>
            <p class="text-lg font-medium mt-2" x-text="loadError"></p>
            <button @click="initialize()"
                    class="mt-4 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700">
                <iconify-icon icon="tabler:refresh" class="mr-2" width="16" height="16"></iconify-icon>
                Retry
            </button>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="px-4 py-5 sm:p-6 space-y-6" x-show="!isLoading && !loadError && modelData?.id">

        <!-- Description Section (Editable by default) -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:file-description" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Description</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Details and purpose of this LLM model. Changes are saved with the "Save Changes" button above.</p>
                </div>
            </div>
            <div class="mt-2 space-y-2">
                <textarea x-model="editedComment"
                          class="block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                          rows="4"
                          placeholder="Enter model description..."></textarea>
            </div>
        </div>

        <!-- Model Basic Info Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:info-circle" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Model Information</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Basic information about this model.</p>
                </div>
            </div>

            <div class="grid grid-cols-1 gap-0">
                <!-- Basic Info Table -->
                <div class="overflow-hidden bg-surface-50 dark:bg-surface-900 rounded-md">
                    <!-- Title, Provider Model row -->
                    <div class="grid grid-cols-2 gap-0">
                        <div class="p-3 border-r border-b border-surface-200 dark:border-surface-600">
                            <div class="text-xs font-medium text-surface-500 dark:text-surface-400">Title:</div>
                            <div class="text-sm font-semibold text-surface-900 dark:text-surface-100" x-text="modelData?.meta?.title || '-'"></div>
                        </div>
                        <div class="p-3 border-b border-surface-200 dark:border-surface-600">
                            <div class="text-xs font-medium text-surface-500 dark:text-surface-400">Provider Model:</div>
                            <div class="text-sm font-mono text-surface-900 dark:text-surface-100" x-text="modelData?.provider_model || '-'"></div>
                        </div>
                    </div>

                    <!-- Token Limits row -->
                    <div class="grid grid-cols-2 gap-0">
                        <div class="p-3 border-r border-surface-200 dark:border-surface-600">
                            <div class="text-xs font-medium text-surface-500 dark:text-surface-400">Max Tokens:</div>
                            <div class="text-sm font-semibold text-surface-900 dark:text-surface-100" x-text="formatTokenCount(modelData?.max_tokens) || '-'"></div>
                        </div>
                        <div class="p-3">
                            <div class="text-xs font-medium text-surface-500 dark:text-surface-400">Output Tokens:</div>
                            <div class="text-sm font-semibold text-surface-900 dark:text-surface-100" x-text="formatTokenCount(modelData?.output_tokens) || '-'"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Capabilities Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="modelData?.meta?.capabilities && modelData.meta.capabilities.length > 0">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:trending-up" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Capabilities</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Features and capabilities of this model.</p>
                </div>
            </div>
            <div class="mt-2 flex flex-wrap gap-2">
                <template x-for="capability in modelData?.meta?.capabilities || []" :key="capability">
                    <span class="inline-flex items-center px-2.5 py-1 rounded-md text-xs font-medium bg-surface-200 dark:bg-surface-600 text-surface-700 dark:text-surface-200">
                        <iconify-icon :icon="getCapabilityIcon(capability)" class="mr-1.5" width="14" height="14"></iconify-icon>
                        <span x-text="formatCapability(capability)"></span>
                    </span>
                </template>
            </div>
        </div>

        <!-- Handlers Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="hasHandlers">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:code" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Handlers</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Function handlers for model operations.</p>
                </div>
            </div>
            <div class="space-y-3">
                <template x-for="(handler, type) in modelData?.handlers || {}" :key="type">
                    <div class="p-3 bg-white dark:bg-surface-700 rounded-md border border-surface-200 dark:border-surface-600">
                        <p class="text-xs font-medium text-surface-500 dark:text-surface-400 mb-1" x-text="formatHandlerType(type) + ':'"></p>
                        <a :href="getKeeperLink(handler)"
                           class="text-sm text-primary-600 dark:text-primary-400 hover:underline flex items-center"
                           @click.prevent="navigateToKeeper(handler)">
                            <iconify-icon icon="tabler:function" class="mr-1.5 flex-shrink-0" width="16" height="16"></iconify-icon>
                            <span class="truncate" x-text="handler"></span>
                        </a>
                    </div>
                </template>
            </div>
        </div>

        <!-- Pricing Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="hasPricing">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:coin" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Pricing</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Cost information per 1M tokens.</p>
                </div>
            </div>
            <div class="mt-2 overflow-x-auto">
                <table class="min-w-full divide-y divide-surface-200 dark:divide-surface-600 bg-surface-50 dark:bg-surface-900 rounded-md">
                    <thead>
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">Category</th>
                        <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">Price (USD per 1M tokens)</th>
                    </tr>
                    </thead>
                    <tbody class="divide-y divide-surface-200 dark:divide-surface-600">
                    <template x-for="(price, type) in modelData?.pricing || {}" :key="type">
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-surface-900 dark:text-surface-200" x-text="formatPricingType(type)"></td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-right text-surface-900 dark:text-surface-200">$<span x-text="price.toFixed(2)"></span></td>
                        </tr>
                    </template>
                    </tbody>
                </table>
            </div>

            <!-- Token Cost Calculator -->
            <div class="mt-4 pt-4 border-t border-surface-200 dark:border-surface-600">
                <h5 class="text-sm font-semibold text-surface-900 dark:text-white mb-3">Token Cost Calculator</h5>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="inputTokens" class="block text-xs font-medium text-surface-500 dark:text-surface-400 mb-1">Input Tokens:</label>
                        <div class="flex">
                            <input
                                    type="number"
                                    id="inputTokens"
                                    x-model.number="calculatorValues.inputTokens"
                                    @input="calculateCost()"
                                    class="block w-full border border-surface-300 dark:border-surface-600 rounded-l-md shadow-sm py-1.5 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                                    min="0"
                                    placeholder="0">
                            <button
                                    @click="setPresetTokens('input', 1000)"
                                    class="px-2 py-1 text-xs bg-surface-200 dark:bg-surface-600 text-surface-700 dark:text-surface-300 border-t border-r border-b border-surface-300 dark:border-surface-600">
                                1K
                            </button>
                            <button
                                    @click="setPresetTokens('input', 10000)"
                                    class="px-2 py-1 text-xs bg-surface-200 dark:bg-surface-600 text-surface-700 dark:text-surface-300 border-t border-r border-b border-surface-300 dark:border-surface-600 rounded-r-md">
                                10K
                            </button>
                        </div>
                    </div>

                    <div>
                        <label for="outputTokens" class="block text-xs font-medium text-surface-500 dark:text-surface-400 mb-1">Output Tokens:</label>
                        <div class="flex">
                            <input
                                    type="number"
                                    id="outputTokens"
                                    x-model.number="calculatorValues.outputTokens"
                                    @input="calculateCost()"
                                    class="block w-full border border-surface-300 dark:border-surface-600 rounded-l-md shadow-sm py-1.5 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                                    min="0"
                                    placeholder="0">
                            <button
                                    @click="setPresetTokens('output', 1000)"
                                    class="px-2 py-1 text-xs bg-surface-200 dark:bg-surface-600 text-surface-700 dark:text-surface-300 border-t border-r border-b border-surface-300 dark:border-surface-600">
                                1K
                            </button>
                            <button
                                    @click="setPresetTokens('output', 10000)"
                                    class="px-2 py-1 text-xs bg-surface-200 dark:bg-surface-600 text-surface-700 dark:text-surface-300 border-t border-r border-b border-surface-300 dark:border-surface-600 rounded-r-md">
                                10K
                            </button>
                        </div>
                    </div>
                </div>

                <div class="mt-4 pt-3 border-t border-surface-200 dark:border-surface-600 flex flex-wrap items-center justify-between">
                    <div class="flex flex-col">
                        <span class="text-xs font-medium text-surface-500 dark:text-surface-400">Estimated Cost:</span>
                        <span class="text-lg font-semibold text-surface-900 dark:text-surface-100">$<span x-text="calculatorValues.totalCost.toFixed(4)"></span></span>
                    </div>
                    <div class="mt-2 sm:mt-0 flex flex-wrap gap-2">
                        <button
                                @click="setPresetScenario('short')"
                                class="px-3 py-1.5 text-xs font-medium bg-surface-200 hover:bg-surface-300 dark:bg-surface-600 dark:hover:bg-surface-500 text-surface-700 dark:text-surface-300 rounded-md">
                            Short Conversation
                        </button>
                        <button
                                @click="setPresetScenario('medium')"
                                class="px-3 py-1.5 text-xs font-medium bg-surface-200 hover:bg-surface-300 dark:bg-surface-600 dark:hover:bg-surface-500 text-surface-700 dark:text-surface-300 rounded-md">
                            Medium Conversation
                        </button>
                        <button
                                @click="setPresetScenario('long')"
                                class="px-3 py-1.5 text-xs font-medium bg-surface-200 hover:bg-surface-300 dark:bg-surface-600 dark:hover:bg-surface-500 text-surface-700 dark:text-surface-300 rounded-md">
                            Long Document
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Additional Info Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700" x-show="hasAdditionalInfo">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:clipboard-list" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Additional Information</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Other model metadata and specifications.</p>
                </div>
            </div>
            <div class="mt-2 grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Knowledge Cutoff -->
                <div x-show="modelData?.knowledge_cutoff" class="flex flex-col">
                    <span class="text-xs font-medium text-surface-500 dark:text-surface-400">Knowledge Cutoff:</span>
                    <span class="text-sm text-surface-900 dark:text-surface-100" x-text="modelData?.knowledge_cutoff || '-'"></span>
                </div>

                <!-- Model Family -->
                <div x-show="modelData?.model_family" class="flex flex-col">
                    <span class="text-xs font-medium text-surface-500 dark:text-surface-400">Model Family:</span>
                    <span class="text-sm text-surface-900 dark:text-surface-100" x-text="modelData?.model_family || '-'"></span>
                </div>

                <!-- MTEB Performance -->
                <div x-show="modelData?.mteb_performance" class="flex flex-col">
                    <span class="text-xs font-medium text-surface-500 dark:text-surface-400">MTEB Performance:</span>
                    <span class="text-sm text-surface-900 dark:text-surface-100" x-text="(modelData?.mteb_performance ? modelData.mteb_performance + '%' : '-')"></span>
                </div>

                <!-- Dimensions (for embedding models) -->
                <div x-show="modelData?.dimensions" class="flex flex-col">
                    <span class="text-xs font-medium text-surface-500 dark:text-surface-400">Dimensions:</span>
                    <span class="text-sm text-surface-900 dark:text-surface-100" x-text="modelData?.dimensions || '-'"></span>
                </div>
            </div>
        </div>
    </div>

    <!-- Status Notification Section (Toast) -->
    <div x-data="{ notification: { show: false, type: 'success', message: '', timeout: null } }"
         @shownotification.window="
             notification.show = false;
             clearTimeout(notification.timeout);
             $nextTick(() => {
                 notification = { ...$event.detail, show: true };
                 notification.timeout = setTimeout(() => notification.show = false, 5000);
             });
         "
         x-show="notification.show"
         x-transition:enter="transform ease-out duration-300 transition"
         x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
         x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed bottom-4 right-4 max-w-sm w-full z-50">
        <div class="p-4 rounded-md shadow-lg"
             :class="{
                'bg-green-50 border border-green-200 dark:bg-green-900 dark:border-green-800': notification.type === 'success',
                'bg-red-50 border border-red-200 dark:bg-red-900 dark:border-red-800': notification.type === 'error',
                'bg-yellow-50 border border-yellow-200 dark:bg-yellow-900 dark:border-yellow-800': notification.type === 'warning'
             }">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <iconify-icon
                            :icon="notification.type === 'success' ? 'tabler:circle-check' : (notification.type === 'error' ? 'tabler:alert-circle' : 'tabler:alert-triangle')"
                            :class="{
                                'text-green-600 dark:text-green-400': notification.type === 'success',
                                'text-red-600 dark:text-red-400': notification.type === 'error',
                                'text-yellow-600 dark:text-yellow-400': notification.type === 'warning'
                            }"
                            width="20" height="20"></iconify-icon>
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium"
                       :class="{
                           'text-green-800 dark:text-green-200': notification.type === 'success',
                           'text-red-800 dark:text-red-200': notification.type === 'error',
                           'text-yellow-800 dark:text-yellow-200': notification.type === 'warning'
                       }"
                       x-text="notification.message"></p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button type="button" @click="notification.show = false; clearTimeout(notification.timeout);"
                            class="inline-flex rounded-md p-1 focus:outline-none focus:ring-2 focus:ring-offset-2"
                            :class="{
                                'text-green-500 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 focus:ring-green-600 dark:focus:ring-offset-green-900': notification.type === 'success',
                                'text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 focus:ring-red-600 dark:focus:ring-offset-red-900': notification.type === 'error',
                                'text-yellow-500 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300 focus:ring-yellow-600 dark:focus:ring-offset-yellow-900': notification.type === 'warning'
                            }">
                        <span class="sr-only">Close</span>
                        <iconify-icon icon="tabler:x" width="16" height="16"></iconify-icon>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('modelViewApp', () => ({
            // State variables
            modelData: null,
            isLoading: true,
            loadError: null,
            isSaving: false,
            // Edit state
            editedComment: '',
            // Wippy API connection
            wippyApi: null,
            // Token calculator state
            calculatorValues: {
                inputTokens: 0,
                outputTokens: 0,
                totalCost: 0
            },

            // Computed properties
            get isDirty() {
                return this.editedComment !== (this.modelData?.meta?.comment || '');
            },

            get hasHandlers() {
                return this.modelData?.handlers && Object.keys(this.modelData.handlers).length > 0;
            },

            get hasPricing() {
                return this.modelData?.pricing && Object.keys(this.modelData.pricing).length > 0;
            },

            get hasAdditionalInfo() {
                return this.modelData && (
                    this.modelData.knowledge_cutoff ||
                    this.modelData.model_family ||
                    this.modelData.mteb_performance ||
                    this.modelData.dimensions
                );
            },

            async initialize() {
                this.isLoading = true;
                this.loadError = null;

                try {
                    // Initialize Wippy API
                    if (typeof initWippyApi !== 'function') {
                        console.warn('Wippy API function not found. Using fallback for local testing.');
                        this.wippyApi = this.createFallbackWippyApi();
                    } else {
                        this.wippyApi = await window.initWippyApi();
                    }

                    // Get the entry ID from the config
                    const entryId = this.wippyApi?.config?.path;
                    if (!entryId) {
                        throw new Error('No model ID provided in configuration.');
                    }

                    // Load the model data
                    await this.loadModel(entryId);

                    // Initialize calculator with some default values
                    this.setPresetScenario('medium');
                } catch (err) {
                    console.error('Failed to initialize ModelViewApp:', err);
                    this.loadError = `Initialization Error: ${err.message}`;
                    if (this.wippyApi && this.isFatalError(err)) {
                        this.wippyApi.iframe?.handleError('other', err);
                    }
                } finally {
                    this.isLoading = false;
                }
            },

            // Create a fallback API for testing/development
            createFallbackWippyApi() {
                const fallbackId = new URLSearchParams(window.location.search).get('id') || 'wippy.llm.models:gpt-4.1-nano';

                return {
                    config: {
                        path: fallbackId,
                        feature: { routePrefix: '/apps' },
                        auth: { token: 'fallback-token' }
                    },
                    iframe: {
                        navigate: (v, p) => console.log(`Fallback Nav: ${v}`, p || ''),
                        handleError: (type, err) => console.error(`Fallback Error Handler (${type}):`, err)
                    },
                    api: {
                        get: async (url) => {
                            console.log('Fallback API GET:', url);
                            await new Promise(resolve => setTimeout(resolve, 500));

                            return {
                                data: {
                                    success: true,
                                    entry: {
                                        id: 'wippy.llm.models:gpt-4.1-nano',
                                        kind: 'registry.entry',
                                        meta: {
                                            name: 'gpt-4.1-nano',
                                            type: 'llm.model',
                                            title: 'GPT-4.1 Nano',
                                            comment: 'Fastest, most cost-effective GPT 4.1 model',
                                            capabilities: ['tool_use', 'vision', 'generate', 'structured_output']
                                        },
                                        max_tokens: 1047576,
                                        handlers: {
                                            call_tools: 'wippy.llm.openai:tool_calling',
                                            generate: 'wippy.llm.openai:text_generation',
                                            structured_output: 'wippy.llm.openai:structured_output'
                                        },
                                        output_tokens: 32768,
                                        pricing: {
                                            cached_input: 0.03,
                                            input: 0.10,
                                            output: 0.40
                                        },
                                        provider_model: 'gpt-4.1-nano'
                                    }
                                }
                            };
                        },
                        put: async (url, payload) => {
                            console.log('Fallback API PUT:', url, payload);
                            await new Promise(resolve => setTimeout(resolve, 300));

                            return {
                                data: {
                                    success: true,
                                    message: "Entry updated successfully",
                                    id: payload.id,
                                    kind: payload.kind,
                                    version: 27,
                                    merge: true,
                                    updated: {
                                        meta: true
                                    }
                                }
                            };
                        }
                    }
                };
            },

            // Load model data from API
            async loadModel(id) {
                this.isLoading = true;
                this.loadError = null;

                try {
                    const response = await this.wippyApi.api.get(`/api/v1/keeper/registry/entry?id=${encodeURIComponent(id)}`);
                    const data = response.data;

                    if (!data.success || !data.entry) {
                        throw new Error(data.error || 'Invalid server response loading model.');
                    }

                    // Process the model data
                    this.modelData = data.entry;
                    console.log("Model data loaded:", this.modelData);

                    // Make sure important structures exist
                    if (!this.modelData.meta) this.modelData.meta = {};

                    // Move data from data to top level if needed (some APIs return nested data)
                    if (this.modelData.data) {
                        // For each property in data, if it doesn't exist at top level, copy it
                        for (const key in this.modelData.data) {
                            if (this.modelData[key] === undefined) {
                                this.modelData[key] = this.modelData.data[key];
                            }
                        }

                        // For meta properties
                        if (this.modelData.data.meta) {
                            for (const key in this.modelData.data.meta) {
                                if (this.modelData.meta[key] === undefined) {
                                    this.modelData.meta[key] = this.modelData.data.meta[key];
                                }
                            }
                        }
                    }

                    // Set the editable comment field
                    this.editedComment = this.modelData.meta.comment || '';

                } catch (error) {
                    console.error('Error loading model data:', error);
                    this.loadError = `Failed to load model: ${error.message}`;

                    if (error.response?.status === 401 || error.response?.status === 403) {
                        this.wippyApi.iframe?.handleError('auth-expired', error);
                    }
                } finally {
                    this.isLoading = false;
                }
            },

            // Save model comment
            async saveComment() {
                if (this.isSaving || !this.isDirty) {
                    if (!this.isDirty) this.showNotification('warning', 'No changes to save.');
                    return;
                }

                this.isSaving = true;

                try {
                    if (!this.modelData?.id) {
                        throw new Error('Model ID is missing for save.');
                    }

                    // Prepare update payload (only updating the comment)
                    const updatePayload = {
                        id: this.modelData.id,
                        kind: this.modelData.kind,
                        meta: {
                            comment: this.editedComment
                        },
                        merge: true
                    };

                    const response = await this.wippyApi.api.put(
                        `/api/v1/keeper/registry/entry?id=${encodeURIComponent(this.modelData.id)}`,
                        updatePayload
                    );

                    const data = response.data;
                    if (!data.success) {
                        throw new Error(data.error || 'Failed to save model data.');
                    }

                    // Update local data
                    this.modelData.meta.comment = this.editedComment;

                    this.showNotification('success', 'Model description saved successfully.');
                } catch (error) {
                    console.error('Error saving model comment:', error);
                    this.showNotification('error', `Save Failed: ${error.message}`);

                    if (error.response?.status === 401 || error.response?.status === 403) {
                        this.wippyApi.iframe?.handleError('auth-expired', error);
                    }
                } finally {
                    this.isSaving = false;
                }
            },

            // Token calculator methods
            calculateCost() {
                if (!this.modelData?.pricing) {
                    this.calculatorValues.totalCost = 0;
                    return;
                }

                let inputCost = 0;
                let outputCost = 0;

                // Get input cost (prefer cached input if available)
                if (this.modelData.pricing.cached_input !== undefined) {
                    inputCost = (this.calculatorValues.inputTokens / 1000000) * this.modelData.pricing.cached_input;
                } else if (this.modelData.pricing.input !== undefined) {
                    inputCost = (this.calculatorValues.inputTokens / 1000000) * this.modelData.pricing.input;
                }

                // Get output cost
                if (this.modelData.pricing.output !== undefined) {
                    outputCost = (this.calculatorValues.outputTokens / 1000000) * this.modelData.pricing.output;
                }

                this.calculatorValues.totalCost = inputCost + outputCost;
            },

            setPresetTokens(type, amount) {
                if (type === 'input') {
                    this.calculatorValues.inputTokens = amount;
                } else if (type === 'output') {
                    this.calculatorValues.outputTokens = amount;
                }
                this.calculateCost();
            },

            setPresetScenario(scenario) {
                switch(scenario) {
                    case 'short':
                        this.calculatorValues.inputTokens = 500;
                        this.calculatorValues.outputTokens = 1000;
                        break;
                    case 'medium':
                        this.calculatorValues.inputTokens = 40000;
                        this.calculatorValues.outputTokens = 35000;
                        break;
                    case 'long':
                        this.calculatorValues.inputTokens = 90000;
                        this.calculatorValues.outputTokens = 30000;
                        break;
                    default:
                        return;
                }
                this.calculateCost();
            },

            // Helper functions
            isFatalError(error) {
                return error.fatal === true ||
                    error.message?.includes('critical') ||
                    error.message?.includes('auth');
            },

            getNamespace(id) {
                if (!id || typeof id !== 'string') return '';
                const parts = id.split(':');
                return parts[0] || '';
            },

            getName(id) {
                if (!id || typeof id !== 'string') return '';
                const parts = id.split(':');
                return parts.length > 1 ? parts.slice(1).join(':') : (parts[0] || '');
            },

            getKeeperLink(id) {
                if(!id) return '#';
                return `${this.wippyApi?.config?.feature?.routePrefix || ''}/keeper/${id}`;
            },

            navigateToKeeper(id) {
                if (id && this.wippyApi?.iframe?.navigate) {
                    this.wippyApi.iframe.navigate(`/keeper/${id}`);
                } else if (id) {
                    console.warn('Navigation API not available. Falling back to href.');
                    window.location.href = this.getKeeperLink(id);
                }
            },

            // Format helpers
            formatTokenCount(count) {
                if (count === undefined || count === null) return '-';

                // Handle scientific notation (e.g., 1.048576e+06)
                let num = count;
                if (typeof count === 'string') {
                    num = parseFloat(count);
                }

                // Format with commas for thousands
                if (num >= 1000000) {
                    return (num / 1000000).toFixed(1) + 'M';
                } else if (num >= 1000) {
                    return (num / 1000).toFixed(1) + 'K';
                } else {
                    return num.toString();
                }
            },

            formatCapability(capability) {
                if (!capability) return '';

                // Convert snake_case to Title Case
                return capability
                    .split('_')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
                    .join(' ');
            },

            getCapabilityIcon(capability) {
                if (!capability) return 'tabler:circle-check';

                switch(capability.toLowerCase()) {
                    case 'tool_use': return 'tabler:tool';
                    case 'vision': return 'tabler:eye';
                    case 'thinking': return 'tabler:brain';
                    case 'caching': return 'tabler:database';
                    case 'generate': return 'tabler:text';
                    case 'multilingual': return 'tabler:language';
                    case 'audio': return 'tabler:microphone';
                    case 'video': return 'tabler:video';
                    case 'structured_output': return 'tabler:table';
                    default: return 'tabler:circle-check';
                }
            },

            formatHandlerType(type) {
                if (!type) return '';

                // Convert snake_case to Title Case
                return type
                    .split('_')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
                    .join(' ');
            },

            formatPricingType(type) {
                if (!type) return '';

                // Some common pricing types to format nicely
                const pricingLabels = {
                    'input': 'Input',
                    'output': 'Output',
                    'cached_input': 'Cached Input',
                    'input_long': 'Long Input',
                    'output_long': 'Long Output',
                    'output_reasoning': 'Reasoning Output',
                    'grounding': 'Grounding'
                };

                if (pricingLabels[type]) {
                    return pricingLabels[type];
                }

                // Convert snake_case to Title Case as fallback
                return type
                    .split('_')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
                    .join(' ');
            },

            // Show notification
            showNotification(type, message) {
                window.dispatchEvent(new CustomEvent('shownotification', { detail: { type, message } }));
            }
        }));
    });
</script>
{{ end }}