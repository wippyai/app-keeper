{{ extends "/common/layout" }}

{* Page title and description *}
{{ block title() }}Executor Information{{ end }}
{{ block metaDescription() }}View and edit executor configuration{{ end }}

{{ block mainContent() }}
<div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden max-w-5xl mx-auto"
     x-data="executorViewApp"
     x-init="initialize()"
     x-cloak>

    <!-- Page Header -->
    <div class="px-4 py-5 border-b border-surface-200 dark:border-surface-600 sm:px-6 flex justify-between items-center">
        <div class="flex items-center">
            <iconify-icon icon="tabler:terminal" class="text-3xl text-primary-600 dark:text-primary-400 mr-3 flex-shrink-0"></iconify-icon>
            <div>
                <h3 class="text-lg leading-6 font-medium text-surface-900 dark:text-surface-100">Executor Information</h3>
                <p class="mt-1 text-sm text-surface-500 dark:text-surface-400"
                   x-show="entry?.id">
                    <span x-text="getNamespace(entry?.id)"></span>:<span x-text="getName(entry?.id)"></span>
                    <span class="ml-1">(Process Executor)</span>
                </p>
            </div>
        </div>
        <div class="flex space-x-3">
            <button
                    id="saveButton"
                    type="button"
                    class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed"
                    :disabled="isSaving || isLoading || !isDirty"
                    @click="saveEntry()">
                <template x-if="isSaving">
                    <iconify-icon icon="tabler:loader" class="animate-spin mr-2" width="16" height="16"></iconify-icon>
                </template>
                <template x-if="!isSaving">
                    <iconify-icon icon="tabler:device-floppy" class="mr-2" width="16" height="16"></iconify-icon>
                </template>
                Save Changes
            </button>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div id="loadingIndicator" class="flex justify-center items-center py-12" x-show="isLoading">
        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
        <span class="ml-3 text-surface-700 dark:text-surface-300">Loading executor details...</span>
    </div>

    <!-- Error Indicator -->
    <div id="errorIndicator" class="px-4 py-12 sm:p-6 text-red-600 dark:text-red-400"
         x-show="!isLoading && loadError">
        <div class="flex flex-col items-center justify-center">
            <iconify-icon icon="tabler:alert-circle" class="mr-2" width="32" height="32"></iconify-icon>
            <p class="text-lg font-medium mt-2" x-text="loadError"></p>
            <button @click="initialize()"
                    class="mt-4 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700">
                <iconify-icon icon="tabler:refresh" class="mr-2" width="16" height="16"></iconify-icon>
                Retry
            </button>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="px-4 py-5 sm:p-6 space-y-6" x-show="!isLoading && !loadError && entry">

        <!-- Description Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:file-description" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div class="flex-grow">
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Description</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Details and purpose of this process executor. Changes are saved with the "Save Changes" button above.</p>
                </div>
            </div>
            <div class="mt-2 space-y-2">
                <textarea
                        :value="entry?.meta?.comment || ''"
                        @input="updateComment($event.target.value)"
                        class="block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                        rows="4"
                        placeholder="Enter executor description..."
                        :disabled="isLoading || isSaving"></textarea>
            </div>
        </div>

        <!-- Executor Configuration Section -->
        <div class="bg-surface-100 dark:bg-surface-800 rounded-lg p-4 border border-surface-200 dark:border-surface-700">
            <div class="flex items-start mb-3">
                <iconify-icon icon="tabler:settings" class="mt-1 mr-3 text-primary-600 dark:text-primary-500 flex-shrink-0" width="20" height="20"></iconify-icon>
                <div>
                    <h4 class="text-base font-semibold text-surface-900 dark:text-white">Executor Configuration</h4>
                    <p class="mt-1 text-xs text-surface-600 dark:text-surface-400">Settings for the process executor.</p>
                </div>
            </div>

            <div class="mt-3 space-y-4">
                <!-- Default Working Directory -->
                <div>
                    <label for="defaultWorkDir" class="block text-sm font-medium text-surface-700 dark:text-surface-300">Default Working Directory</label>
                    <input type="text" id="defaultWorkDir"
                           :value="entry?.data?.default_work_dir || ''"
                           @input="updateWorkDir($event.target.value)"
                           class="mt-1 block w-full border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                           placeholder="/path/to/working/directory"
                           :disabled="isLoading || isSaving">
                    <p class="mt-1 text-xs text-surface-500 dark:text-surface-400">The default directory where processes will execute if not specified.</p>
                </div>

                <!-- Command Whitelist -->
                <div>
                    <label class="block text-sm font-medium text-surface-700 dark:text-surface-300">Command Whitelist</label>
                    <p class="mt-1 text-xs text-surface-500 dark:text-surface-400">List of allowed commands (empty means no restrictions).</p>

                    <div class="mt-2">
                        <div class="space-y-2">
                            <template x-for="(cmd, index) in commands" :key="'cmd-'+index">
                                <div class="flex items-center">
                                    <input type="text"
                                           :value="cmd"
                                           @input="updateCommand(index, $event.target.value)"
                                           class="flex-grow border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                                           placeholder="allowed-command"
                                           :disabled="isLoading || isSaving">
                                    <button type="button" @click="removeCommand(index)"
                                            class="ml-2 p-2 text-surface-500 hover:text-red-600 dark:text-surface-400 dark:hover:text-red-400 focus:outline-none disabled:opacity-50"
                                            :disabled="isLoading || isSaving">
                                        <iconify-icon icon="tabler:trash" width="16" height="16"></iconify-icon>
                                    </button>
                                </div>
                            </template>
                        </div>

                        <button type="button" @click="addCommand"
                                class="mt-3 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md shadow-sm text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-700 hover:bg-surface-50 dark:hover:bg-surface-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                                :disabled="isLoading || isSaving">
                            <iconify-icon icon="tabler:plus" class="mr-1.5" width="16" height="16"></iconify-icon>
                            Add Command
                        </button>
                    </div>
                </div>

                <!-- Default Environment Variables Section -->
                <div>
                    <label class="block text-sm font-medium text-surface-700 dark:text-surface-300">Default Environment Variables</label>
                    <p class="mt-1 text-xs text-surface-500 dark:text-surface-400">Environment variables that will be applied to all processes.</p>

                    <div class="mt-2">
                        <div class="space-y-2">
                            <template x-for="(value, key) in envVars" :key="'env-'+key">
                                <div class="flex items-center space-x-2">
                                    <input type="text"
                                           :value="key"
                                           @input="updateEnvKey(key, $event.target.value)"
                                           class="w-1/3 border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                                           placeholder="VAR_NAME"
                                           :disabled="isLoading || isSaving">
                                    <span class="text-surface-500 dark:text-surface-400">=</span>
                                    <input type="text"
                                           :value="value"
                                           @input="updateEnvValue(key, $event.target.value)"
                                           class="flex-grow border border-surface-300 dark:border-surface-600 rounded-md shadow-sm py-2 px-3 bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm"
                                           placeholder="value"
                                           :disabled="isLoading || isSaving">
                                    <button type="button" @click="removeEnvVar(key)"
                                            class="p-2 text-surface-500 hover:text-red-600 dark:text-surface-400 dark:hover:text-red-400 focus:outline-none disabled:opacity-50"
                                            :disabled="isLoading || isSaving">
                                        <iconify-icon icon="tabler:trash" width="16" height="16"></iconify-icon>
                                    </button>
                                </div>
                            </template>
                        </div>

                        <button type="button" @click="addEnvVar"
                                class="mt-3 inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md shadow-sm text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-700 hover:bg-surface-50 dark:hover:bg-surface-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                                :disabled="isLoading || isSaving">
                            <iconify-icon icon="tabler:plus" class="mr-1.5" width="16" height="16"></iconify-icon>
                            Add Environment Variable
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Notification Toast -->
    <div x-data="{ notification: { show: false, type: 'success', message: '', timeout: null } }"
         @shownotification.window="
             notification.show = false;
             clearTimeout(notification.timeout);
             $nextTick(() => {
                 notification = { ...$event.detail, show: true };
                 notification.timeout = setTimeout(() => notification.show = false, 5000);
             });
         "
         x-show="notification.show"
         x-transition:enter="transform ease-out duration-300 transition"
         x-transition:enter-start="translate-y-2 opacity-0 sm:translate-y-0 sm:translate-x-2"
         x-transition:enter-end="translate-y-0 opacity-100 sm:translate-x-0"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100"
         x-transition:leave-end="opacity-0"
         class="fixed bottom-4 right-4 max-w-sm w-full z-50">
        <div class="p-4 rounded-md shadow-lg"
             :class="{
                'bg-green-50 border border-green-200 dark:bg-green-900 dark:border-green-800': notification.type === 'success',
                'bg-red-50 border border-red-200 dark:bg-red-900 dark:border-red-800': notification.type === 'error',
                'bg-yellow-50 border border-yellow-200 dark:bg-yellow-900 dark:border-yellow-800': notification.type === 'warning'
             }">
            <div class="flex items-center">
                <div class="flex-shrink-0">
                    <iconify-icon
                            :icon="notification.type === 'success' ? 'tabler:circle-check' : (notification.type === 'error' ? 'tabler:alert-circle' : 'tabler:alert-triangle')"
                            :class="{
                                'text-green-600 dark:text-green-400': notification.type === 'success',
                                'text-red-600 dark:text-red-400': notification.type === 'error',
                                'text-yellow-600 dark:text-yellow-400': notification.type === 'warning'
                            }"
                            width="20" height="20"></iconify-icon>
                </div>
                <div class="ml-3 w-0 flex-1 pt-0.5">
                    <p class="text-sm font-medium"
                       :class="{
                           'text-green-800 dark:text-green-200': notification.type === 'success',
                           'text-red-800 dark:text-red-200': notification.type === 'error',
                           'text-yellow-800 dark:text-yellow-200': notification.type === 'warning'
                       }"
                       x-text="notification.message"></p>
                </div>
                <div class="ml-4 flex-shrink-0 flex">
                    <button type="button" @click="notification.show = false; clearTimeout(notification.timeout);"
                            class="inline-flex rounded-md p-1 focus:outline-none focus:ring-2 focus:ring-offset-2"
                            :class="{
                                'text-green-500 hover:text-green-700 dark:text-green-400 dark:hover:text-green-300 focus:ring-green-600 dark:focus:ring-offset-green-900': notification.type === 'success',
                                'text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 focus:ring-red-600 dark:focus:ring-offset-red-900': notification.type === 'error',
                                'text-yellow-500 hover:text-yellow-700 dark:text-yellow-400 dark:hover:text-yellow-300 focus:ring-yellow-600 dark:focus:ring-offset-yellow-900': notification.type === 'warning'
                            }">
                        <span class="sr-only">Close</span>
                        <iconify-icon icon="tabler:x" width="16" height="16"></iconify-icon>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('executorViewApp', () => ({
            // State variables
            entry: null,
            originalEntry: null,
            isLoading: true,
            loadError: null,
            isSaving: false,

            // Extracted data for easier manipulation
            commands: [],
            envVars: {},

            // Change tracking
            dirtyFields: {
                comment: false,
                workDir: false,
                commands: false,
                envVars: false
            },

            // API connection
            wippyApi: null,

            // Initialization
            async initialize() {
                this.isLoading = true;
                this.loadError = null;
                this.resetState();

                try {
                    // Initialize Wippy API
                    if (typeof initWippyApi !== 'function') {
                        console.warn('Using fallback API for local testing');
                        this.wippyApi = this.createFallbackWippyApi();
                    } else {
                        this.wippyApi = await window.initWippyApi();
                    }

                    // Get the entry ID
                    const entryId = this.wippyApi?.config?.path;
                    if (!entryId) {
                        throw new Error('No executor ID provided in configuration');
                    }

                    // Load the entry
                    await this.loadEntry(entryId);
                } catch (err) {
                    console.error('Failed to initialize:', err);
                    this.loadError = `Initialization error: ${err.message}`;

                    if (this.wippyApi && this.isFatalError(err)) {
                        this.wippyApi.iframe?.handleError('other', err);
                    }
                } finally {
                    this.isLoading = false;
                }
            },

            resetState() {
                this.entry = null;
                this.originalEntry = null;
                this.commands = [];
                this.envVars = {};
                this.dirtyFields = {
                    comment: false,
                    workDir: false,
                    commands: false,
                    envVars: false
                };
            },

            // Fallback API for testing
            createFallbackWippyApi() {
                const fallbackId = new URLSearchParams(window.location.search).get('id') || 'fallback:exec/native_executor';

                return {
                    config: {
                        path: fallbackId,
                        feature: { routePrefix: '/apps' },
                        auth: { token: 'fallback-token' }
                    },
                    iframe: {
                        navigate: (v, p) => console.log(`Fallback Nav: ${v}`, p || ''),
                        handleError: (type, err) => console.error(`Fallback Error Handler (${type}):`, err)
                    },
                    api: {
                        get: async (url) => {
                            console.log('Fallback API GET:', url);
                            await new Promise(resolve => setTimeout(resolve, 500));

                            return {
                                data: {
                                    success: true,
                                    entry: {
                                        id: fallbackId,
                                        kind: 'exec.native',
                                        meta: {
                                            comment: 'Native process executor for running system commands',
                                        },
                                        data: {
                                            default_work_dir: '/var/run/app',
                                            default_env: {
                                                'PATH': '/usr/local/bin:/usr/bin:/bin',
                                                'LANG': 'en_US.UTF-8'
                                            },
                                            command_whitelist: ['bash', 'python', 'node']
                                        }
                                    }
                                }
                            };
                        },
                        put: async (url, payload) => {
                            console.log('Fallback API PUT:', url, payload);
                            await new Promise(resolve => setTimeout(resolve, 300));

                            return {
                                data: {
                                    success: true,
                                    message: "Entry updated successfully",
                                    id: payload.id,
                                    kind: payload.kind,
                                    version: 27,
                                    merge: true,
                                    updated: {
                                        data: true,
                                        kind: true,
                                        meta: true
                                    }
                                }
                            };
                        }
                    }
                };
            },

            // Helper functions
            isFatalError(error) {
                return error.fatal === true ||
                    error.message?.includes('critical') ||
                    error.message?.includes('auth');
            },

            getNamespace(id) {
                if (!id || typeof id !== 'string') return '';
                const parts = id.split(':');
                return parts[0] || '';
            },

            getName(id) {
                if (!id || typeof id !== 'string') return '';
                const parts = id.split(':');
                return parts.length > 1 ? parts.slice(1).join(':') : (parts[0] || '');
            },

            // Data loading
            async loadEntry(id) {
                this.isLoading = true;
                this.loadError = null;

                try {
                    const response = await this.wippyApi.api.get(`/api/v1/keeper/registry/entry?id=${encodeURIComponent(id)}`);
                    const data = response.data;

                    if (!data.success || !data.entry) {
                        throw new Error(data.error || 'Invalid server response loading executor');
                    }

                    // Store the entry data
                    this.entry = data.entry;

                    // Ensure required structures exist
                    if (!this.entry.meta) this.entry.meta = {};
                    if (!this.entry.data) this.entry.data = {};

                    // Extract commands and environment variables for easier manipulation
                    this.commands = Array.isArray(this.entry.data.command_whitelist)
                        ? [...this.entry.data.command_whitelist]
                        : [];

                    this.envVars = typeof this.entry.data.default_env === 'object' && this.entry.data.default_env !== null
                        ? {...this.entry.data.default_env}
                        : {};

                    // Store original data for comparison
                    this.originalEntry = JSON.parse(JSON.stringify(this.entry));

                    // Reset dirty flags
                    this.dirtyFields = {
                        comment: false,
                        workDir: false,
                        commands: false,
                        envVars: false
                    };
                } catch (error) {
                    console.error('Error loading executor data:', error);
                    this.loadError = `Failed to load executor: ${error.message}`;

                    if (error.response?.status === 401 || error.response?.status === 403) {
                        this.wippyApi.iframe?.handleError('auth-expired', error);
                    }
                } finally {
                    this.isLoading = false;
                }
            },

            // Form field update handlers
            updateComment(value) {
                if (!this.entry) return;
                if (!this.entry.meta) this.entry.meta = {};

                this.entry.meta.comment = value;
                this.dirtyFields.comment = true;
            },

            updateWorkDir(value) {
                if (!this.entry) return;
                if (!this.entry.data) this.entry.data = {};

                this.entry.data.default_work_dir = value;
                this.dirtyFields.workDir = true;
            },

            // Command list handlers
            addCommand() {
                this.commands.push('');
                this.dirtyFields.commands = true;
            },

            removeCommand(index) {
                if (index >= 0 && index < this.commands.length) {
                    this.commands.splice(index, 1);
                    this.dirtyFields.commands = true;
                }
            },

            updateCommand(index, value) {
                if (index >= 0 && index < this.commands.length) {
                    this.commands[index] = value;
                    this.dirtyFields.commands = true;
                }
            },

            // Environment variable handlers
            addEnvVar() {
                const newKey = `ENV_VAR_${Object.keys(this.envVars).length + 1}`;
                this.envVars[newKey] = '';
                this.dirtyFields.envVars = true;
            },

            removeEnvVar(key) {
                if (key && this.envVars.hasOwnProperty(key)) {
                    delete this.envVars[key];
                    this.dirtyFields.envVars = true;
                }
            },

            updateEnvKey(oldKey, newKey) {
                if (oldKey && newKey && oldKey !== newKey) {
                    // Check if the new key already exists
                    if (this.envVars.hasOwnProperty(newKey)) {
                        this.showNotification('warning', `Environment variable '${newKey}' already exists`);
                        return;
                    }

                    // Store the value
                    const value = this.envVars[oldKey];

                    // Remove old key and add new one
                    delete this.envVars[oldKey];
                    this.envVars[newKey] = value;

                    this.dirtyFields.envVars = true;
                }
            },

            updateEnvValue(key, value) {
                if (key && this.envVars.hasOwnProperty(key)) {
                    this.envVars[key] = value;
                    this.dirtyFields.envVars = true;
                }
            },

            // Save functionality
            async saveEntry() {
                if (this.isSaving || !this.isDirty) {
                    if (!this.isDirty) this.showNotification('warning', 'No changes to save');
                    return;
                }

                if (!this.entry) {
                    this.showNotification('error', 'Cannot save: no entry data loaded');
                    return;
                }

                this.isSaving = true;

                try {
                    // Prepare update payload
                    const updatePayload = {
                        id: this.entry.id,
                        kind: this.entry.kind,
                        meta: {
                            comment: this.entry.meta.comment || ''
                        },
                        data: {
                            default_work_dir: this.entry.data.default_work_dir || '',
                            command_whitelist: this.commands.filter(cmd => cmd.trim() !== ''),
                            default_env: {...this.envVars}
                        },
                        merge: true
                    };

                    // Submit update
                    const response = await this.wippyApi.api.put(
                        `/api/v1/keeper/registry/entry?id=${encodeURIComponent(this.entry.id)}`,
                        updatePayload
                    );

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to save configuration');
                    }

                    // Update original entry reference
                    this.originalEntry = JSON.parse(JSON.stringify(this.entry));

                    // Reset dirty flags
                    this.dirtyFields = {
                        comment: false,
                        workDir: false,
                        commands: false,
                        envVars: false
                    };

                    this.showNotification('success', 'Executor configuration saved successfully');
                } catch (error) {
                    console.error('Error saving configuration:', error);
                    this.showNotification('error', `Failed to save: ${error.message}`);

                    if (error.response?.status === 401 || error.response?.status === 403) {
                        this.wippyApi.iframe?.handleError('auth-expired', error);
                    }
                } finally {
                    this.isSaving = false;
                }
            },

            // Computed properties
            get isDirty() {
                return this.dirtyFields.comment ||
                    this.dirtyFields.workDir ||
                    this.dirtyFields.commands ||
                    this.dirtyFields.envVars;
            },

            // UI feedback
            showNotification(type, message) {
                window.dispatchEvent(new CustomEvent('shownotification', {
                    detail: { type, message }
                }));
            }
        }));
    });
</script>
{{ end }}