{{ extends "/common/layout" }}

{* Page title and description *}
{{ block title() }}DocScout Extraction Groups{{ end }}
{{ block metaDescription() }}Manage document extraction groups and templates{{ end }}

{{ block mainContent() }}
<div x-data="docScoutGroups" x-init="initialize()" x-cloak
     class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden mb-6">
    {{ yield headerSection() }}
    {{ yield contentSection() }}
    {{ yield statusMessage() }}
</div>
{{ end }}

{* Header Section *}
{{ block headerSection() }}
<div class="px-4 py-5 border-b border-surface-200 dark:border-surface-600 sm:px-6 flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
    <div>
        <h3 class="text-lg leading-6 font-medium text-surface-900 dark:text-surface-100">Extraction Groups</h3>
        <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">Manage document extraction templates and
            field mappings</p>
    </div>
    <div class="flex flex-col sm:flex-row gap-4 w-full sm:w-auto">
        {{ yield searchInput() }}
        {{ yield actionButtons() }}
    </div>
</div>
{{ end }}

{* Search Input *}
{{ block searchInput() }}
<div class="relative w-full sm:w-64">
    <input id="searchInput" type="text"
           x-model="searchTerm"
           @input="applyFilter()"
           class="block w-full pl-10 pr-10 py-2 border border-surface-300 dark:border-surface-600 rounded-md shadow-sm bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-400 focus:border-primary-400 sm:text-sm"
           placeholder="Search by title, ID, tag, etc.">
    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <iconify-icon icon="tabler:search"
                      class="h-5 w-5 text-surface-400 dark:text-surface-500"></iconify-icon>
    </div>
    <button id="clearSearchBtn" @click="clearSearch()" x-show="searchTerm.length > 0"
            class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer text-surface-400 hover:text-surface-600 dark:hover:text-surface-300">
        <iconify-icon icon="tabler:x" class="h-4 w-4"></iconify-icon>
    </button>
</div>
{{ end }}

{* Action Buttons *}
{{ block actionButtons() }}
<div class="flex space-x-2">
    <button id="startChatButton" @click="startDocScoutChat"
            class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        <iconify-icon icon="tabler:robot" width="16" height="16"></iconify-icon>
    </button>
    <button id="createGroupButton" @click="createGroup"
            class="inline-flex items-center px-3 py-1.5 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
        <iconify-icon icon="tabler:plus" class="mr-1.5" width="16" height="16"></iconify-icon>
        Create Group
    </button>
    <button id="refreshButton" @click="loadGroups" :disabled="isLoading"
            class="inline-flex items-center px-3 py-1.5 border border-surface-300 dark:border-surface-600 rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-100 dark:hover:bg-surface-700 disabled:opacity-50">
        <template x-if="isLoading">
            <iconify-icon icon="tabler:loader" class="mr-1.5 animate-spin" width="16" height="16"></iconify-icon>
        </template>
        <template x-if="!isLoading">
            <iconify-icon icon="tabler:refresh" class="mr-1.5" width="16" height="16"></iconify-icon>
        </template>
        <span x-text="isLoading ? 'Loading...' : 'Refresh'"></span>
    </button>
</div>
{{ end }}

{* Main Content Section *}
{{ block contentSection() }}
{{ yield loadingIndicator() }}
{{ yield groupList() }}
{{ yield emptyState() }}
{{ end }}

{* Loading Indicator *}
{{ block loadingIndicator() }}
<div id="loadingIndicator" x-show="isLoading" class="flex justify-center px-4 sm:px-6 py-8">
    <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
</div>
{{ end }}

{* Group List Table *}
{{ block groupList() }}
<div id="groupsContainer" x-show="!isLoading && filteredGroups.length > 0">
    <div class="overflow-x-auto">
        <table class="min-w-full divide-y divide-surface-200 dark:divide-surface-600 table-auto">
            {{ yield tableHeader() }}
            {{ yield tableBody() }}
        </table>
    </div>
    {{ yield pagination() }}
</div>
{{ end }}

{* Table Header *}
{{ block tableHeader() }}
<thead class="bg-surface-100 dark:bg-surface-800">
<tr>
    <th scope="col"
        class="px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider w-1/3">
        Group Information
    </th>
    <th scope="col"
        class="px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider w-1/6">
        Fields
    </th>
    <th scope="col"
        class="px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider w-1/3">
        Tags
    </th>
    <th scope="col"
        class="px-6 py-3 text-right text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider w-auto">
        Actions
    </th>
</tr>
</thead>
{{ end }}

{* Table Body *}
{{ block tableBody() }}
<tbody id="groupsList"
       class="bg-white dark:bg-surface-700 divide-y divide-surface-200 dark:divide-surface-600">
<template x-for="group in paginatedGroups" :key="group.id">
    <tr class="hover:bg-surface-50 dark:hover:bg-surface-600">
        {{ yield groupInfoCell() }}
        {{ yield fieldsCell() }}
        {{ yield tagsCell() }}
        {{ yield actionsCell() }}
    </tr>
</template>
</tbody>
{{ end }}

{* Group Information Cell *}
{{ block groupInfoCell() }}
<td class="px-6 py-4 whitespace-normal break-words">
    <div>
        <div class="flex items-center justify-between">
            <span class="text-sm font-medium text-surface-900 dark:text-surface-100" x-text="group.title || ''"></span>
        </div>

        <div class="text-xs font-mono mt-0.5 flex items-center">
            <span class="text-surface-500 dark:text-surface-400" x-text="group.id || ''"></span>
        </div>

        <div class="text-xs text-surface-500 dark:text-surface-400 mt-1"
             x-html="truncateDescription(group.description)">
        </div>

        <!-- Model information and other badges in a row beneath description -->
        <div class="mt-1.5 flex flex-wrap gap-1.5" x-show="group.model || (group.id && group.id.includes('extract')) || (group.scout_validation && group.scout_validation > 0)">
            {{ yield modelBadge() }}
            {{ yield scoutBadge() }}
            {{ yield extractBadge() }}
        </div>
    </div>
</td>
{{ end }}

{* Model Badge *}
{{ block modelBadge() }}
<template x-if="group.model">
    <span class="inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200">
        <span x-text="group.model"></span>
    </span>
</template>
{{ end }}

{* Scout Badge *}
{{ block scoutBadge() }}
<template x-if="group.scout_validation && group.scout_validation > 0">
    <span class="inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200">
        <template x-if="group.scout_model">
            <span class="text-xs" x-text="group.scout_model.length > 12 ? group.scout_model.substring(0, 10) + '...' : group.scout_model"></span>
        </template>
        <template x-if="!group.scout_model">
            <span class="text-xs">scout</span>
        </template>
        <span class="text-xs">: </span>
        <span class="text-xs font-semibold" x-text="' ' + group.scout_validation + 'x'"></span>
    </span>
</template>
{{ end }}

{* Extract Badge *}
{{ block extractBadge() }}
<template x-if="group.id && group.id.includes('extract')">
    <span class="inline-flex items-center px-1.5 py-0.5 rounded text-xs font-medium bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200">
        <span>EXTRACT</span>
    </span>
</template>
{{ end }}

{* Fields Cell *}
{{ block fieldsCell() }}
<td class="px-6 py-4 whitespace-nowrap">
    <div class="text-sm text-surface-900 dark:text-surface-100 font-medium" x-text="(group.field_count || group.fields?.length || 0) + ' fields'"></div>
</td>
{{ end }}

{* Tags Cell *}
{{ block tagsCell() }}
<td class="px-6 py-4 whitespace-normal">
    <div class="flex flex-wrap items-start gap-1">
        <template x-if="group.tags && group.tags.length > 0">
            <template x-for="tag in group.tags" :key="tag">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-primary-100 dark:bg-primary-900 text-primary-800 dark:text-primary-200 mr-1 mb-1" x-text="tag"></span>
            </template>
        </template>
        <template x-if="!group.tags || group.tags.length === 0">
            <span class="text-surface-400 dark:text-surface-500 text-xs italic">No tags</span>
        </template>
    </div>
</td>
{{ end }}

{* Actions Cell *}
{{ block actionsCell() }}
<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium space-x-2">
    <button @click="editGroup(group.id)"
            class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
        <iconify-icon icon="tabler:pencil" width="16" height="16"></iconify-icon>
    </button>
    <!-- Ensure disabled check explicitly checks for truthiness -->
    <button @click="confirmDelete(group.id)" :disabled="!!isDeleting[group.id]"
            class="delete-group-btn inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50"
            :class="{
                    'bg-red-600 hover:bg-red-700 focus:ring-red-500': !deleteConfirm[group.id],
                    'bg-yellow-500 hover:bg-yellow-600 focus:ring-yellow-400': deleteConfirm[group.id] && !isDeleting[group.id],
                    'bg-red-700 cursor-not-allowed': isDeleting[group.id]
                }">
        <template x-if="isDeleting[group.id]">
            <iconify-icon icon="tabler:loader" class="animate-spin" width="16" height="16"></iconify-icon>
        </template>
        <template x-if="!isDeleting[group.id] && deleteConfirm[group.id]">
            <iconify-icon icon="tabler:check" width="16" height="16"></iconify-icon>
        </template>
        <template x-if="!isDeleting[group.id] && !deleteConfirm[group.id]">
            <iconify-icon icon="tabler:trash" width="16" height="16"></iconify-icon>
        </template>
    </button>
</td>
{{ end }}

{* Pagination *}
{{ block pagination() }}
<div class="flex items-center justify-between border-t border-surface-200 dark:border-surface-600 px-4 sm:px-6 py-5">
    <div class="text-sm text-surface-500 dark:text-surface-400">
        Showing <span id="startCount" x-text="startCount"></span> to <span id="endCount" x-text="endCount"></span> of <span id="totalCount" x-text="totalGroups"></span> groups
    </div>
    <div class="flex">
        <button id="prevPageBtn" @click="changePage(currentPage - 1)" :disabled="currentPage === 0"
                class="relative inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-100 dark:hover:bg-surface-700 mr-3 disabled:opacity-50 disabled:cursor-not-allowed">
            Previous
        </button>
        <button id="nextPageBtn" @click="changePage(currentPage + 1)" :disabled="currentPage >= totalPages - 1"
                class="relative inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-100 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed">
            Next
        </button>
    </div>
</div>
{{ end }}

{* Empty State *}
{{ block emptyState() }}
<div id="emptyState" x-show="!isLoading && filteredGroups.length === 0" class="text-center px-4 sm:px-6 py-12">
    <div class="mx-auto h-12 w-12 text-surface-400 dark:text-surface-600">
        <iconify-icon :icon="searchTerm ? 'tabler:search-off' : 'tabler:folder-off'" width="48" height="48"></iconify-icon>
    </div>
    <h3 class="mt-2 text-sm font-medium text-surface-900 dark:text-surface-100"
        x-text="searchTerm ? 'No matching groups found' : 'No extraction groups found'"></h3>
    <p class="mt-1 text-sm text-surface-500 dark:text-surface-400"
       x-text="searchTerm ? 'Try adjusting your search terms.' : 'Get started by creating a new extraction group.'"></p>
    <div class="mt-6" x-show="!searchTerm">
        <button id="emptyStateCreateBtn" @click="createGroup"
                class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
            <iconify-icon icon="tabler:plus" class="-ml-1 mr-2 h-5 w-5" width="20" height="20"></iconify-icon>
            Create Group
        </button>
    </div>
</div>
{{ end }}

{* Status Message *}
{{ block statusMessage() }}
<div x-data
     x-show="$store.docScoutGroupsStatus.show"
     @status-update.window="$store.docScoutGroupsStatus.update($event.detail)"
     x-transition:enter="transform ease-out duration-300 transition"
     x-transition:enter-start="translate-y-full opacity-0"
     x-transition:enter-end="translate-y-0 opacity-100"
     x-transition:leave="transition ease-in duration-300"
     x-transition:leave-start="translate-y-0 opacity-100"
     x-transition:leave-end="translate-y-full opacity-0"
     class="fixed bottom-0 right-0 p-6 z-50"
     style="max-width: 400px;">
    <div class="flex items-center p-4 rounded-lg shadow-lg"
         :class="{
            'bg-green-100 dark:bg-green-900 text-green-700 dark:text-green-200': $store.docScoutGroupsStatus.type === 'success',
            'bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200': $store.docScoutGroupsStatus.type === 'error',
            'bg-blue-100 dark:bg-blue-900 text-blue-700 dark:text-blue-200': $store.docScoutGroupsStatus.type === 'info'
         }">
        <iconify-icon :icon="$store.docScoutGroupsStatus.icon" class="h-5 w-5 mr-3"></iconify-icon>
        <p class="text-sm font-medium" x-text="$store.docScoutGroupsStatus.message"></p>
        <button @click="$store.docScoutGroupsStatus.hide()" class="ml-auto -mx-1.5 -my-1.5 p-1.5 inline-flex h-8 w-8 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2"
                :class="{
                     'text-green-500 hover:bg-green-200 dark:hover:bg-green-800 focus:ring-green-600 dark:focus:ring-offset-green-900': $store.docScoutGroupsStatus.type === 'success',
                     'text-red-500 hover:bg-red-200 dark:hover:bg-red-800 focus:ring-red-600 dark:focus:ring-offset-red-900': $store.docScoutGroupsStatus.type === 'error',
                     'text-blue-500 hover:bg-blue-200 dark:hover:bg-blue-800 focus:ring-blue-600 dark:focus:ring-offset-blue-900': $store.docScoutGroupsStatus.type === 'info'
                 }">
            <span class="sr-only">Dismiss</span>
            <iconify-icon icon="tabler:x" class="h-5 w-5"></iconify-icon>
        </button>
    </div>
</div>
{{ end }}

{{ block customJs() }}
<script>
    // Define escapeHtml globally or ensure it's available before Alpine runs
    function escapeHtml(unsafe) {
        if (unsafe === null || unsafe === undefined) return '';
        return unsafe
            .toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;");
    }

    document.addEventListener('alpine:init', () => {
        // Separate store for status message
        Alpine.store('docScoutGroupsStatus', {
            show: false, type: 'info', message: '', icon: 'tabler:info-circle', timeout: null,
            update(detail) {
                if (this.timeout) clearTimeout(this.timeout);
                this.type = detail.type || 'info'; this.message = detail.message || '';
                this.icon = 'tabler:info-circle';
                if (this.type === 'success') this.icon = 'tabler:check-circle';
                if (this.type === 'error') this.icon = 'tabler:alert-circle';
                this.show = true;
                this.timeout = setTimeout(() => this.hide(), detail.duration || 5000);
            },
            hide() { if (this.timeout) clearTimeout(this.timeout); this.show = false; this.timeout = null; }
        });

        // Define the main component
        Alpine.data('docScoutGroups', () => ({
        {{ yield jsStateManagement() }}
        {{ yield jsInitialization() }}
        {{ yield jsDataLoading() }}
        {{ yield jsSearchAndFiltering() }}
        {{ yield jsPagination() }}
        {{ yield jsChatAndNavigation() }}
        {{ yield jsDeleteAndConfirmation() }}
        {{ yield jsUIHelpers() }}
    }));

        console.log('[DEBUG] DocScout Groups component initialized');
    });
</script>
{{ end }}

{{ block jsStateManagement() }}
// ===== State Variables =====
groups: [],
filteredGroups: [],
isLoading: true,
isDeleting: {}, // Track deletion status per group ID: { 'group_id': true }
deleteConfirm: {}, // Track confirmation state: { 'group_id': true }
deleteTimeout: {}, // Track timeouts for confirm state: { 'group_id': timeoutId }
searchTerm: '',
currentPage: 0,
pageSize: 50,
wippyApi: null,
navigateApi: null,
{{ end }}

{{ block jsInitialization() }}
// ===== Initialization =====
async initialize() {
console.log('Initializing DocScout Groups Alpine component...');
this.isLoading = true;
try {
if (typeof window.initWippyApi !== 'function') {
throw new Error("initWippyApi function not found.");
}

// Initialize the Wippy API
this.wippyApi = await window.initWippyApi();

if (this.wippyApi?.iframe) {
this.navigateApi = this.wippyApi.iframe;
console.log('Wippy API Config initialized');
} else {
throw new Error("Navigation API not available.");
}

await this.loadGroups();
} catch (err) {
console.error('Failed to initialize:', err);
this.showStatus('error', `Initialization failed: ${err.message}`);
this.isLoading = false;

if (this.wippyApi?.iframe?.handleError) {
this.wippyApi.iframe.handleError(err);
}
}
},
{{ end }}

{{ block jsDataLoading() }}
// ===== Data Loading =====
async loadGroups() {
this.isLoading = true;
this.isDeleting = {}; // Reset status
this.deleteConfirm = {};
Object.values(this.deleteTimeout).forEach(clearTimeout);
this.deleteTimeout = {};
console.log('Loading groups...');

try {
// Use the Wippy API for data fetching
const response = await this.wippyApi.api.get('/api/v1/keeper/docscout/groups/list');

if (!response.data.success) {
throw new Error(response.data.error || 'API error');
}

// Process groups to ensure model information is properly set
this.groups = (response.data.groups || []).map(group => {
return {
...group,
scout_validation: group.scout_validation || 0,
scout_model: group.scout_model || '',
model: group.model || '',
extract: group.id && group.id.includes('extract')
};
});

// Show all groups initially
this.filteredGroups = [...this.groups];
console.log(`Loaded ${this.groups.length} groups.`);
} catch (error) {
console.error('Error loading groups:', error);
this.groups = [];
this.filteredGroups = [];
this.showStatus('error', `Failed to load groups: ${error.message}`);
} finally {
this.isLoading = false;
}
},
{{ end }}

{{ block jsSearchAndFiltering() }}
// ===== Search and Filtering =====
applyFilter() {
// Reset pagination
this.currentPage = 0;

// Get clean search term
const term = (this.searchTerm || '').toLowerCase().trim();

// If empty, show all groups
if (!term) {
this.filteredGroups = [...this.groups];
return;
}

// Simple string match helper
const matches = (text, searchTerm) => {
if (!text) return false;
return String(text).toLowerCase().includes(searchTerm);
};

// Filter groups
this.filteredGroups = this.groups.filter(group => {
if (!group) return false;

// Basic field checks
if (matches(group.title, term)) return true;
if (matches(group.id, term)) return true;
if (matches(group.model, term)) return true;
if (matches(group.scout_model, term)) return true;
if (matches(group.description, term)) return true;

// Check tags
if (Array.isArray(group.tags)) {
for (let i = 0; i < group.tags.length; i++) {
if (matches(group.tags[i], term)) return true;
}
}

// Check fields
if (Array.isArray(group.fields)) {
for (let i = 0; i < group.fields.length; i++) {
if (matches(group.fields[i], term)) return true;
}
}

// Special cases
if (term === 'scout' && group.scout_validation > 0) return true;
if (term === 'extract' && matches(group.id, 'extract')) return true;

return false;
});
},

// Clear search
clearSearch() {
this.searchTerm = '';
this.filteredGroups = [...this.groups];
this.currentPage = 0;
},
{{ end }}

{{ block jsPagination() }}
// ===== Pagination =====
get paginatedGroups() {
const s = this.currentPage * this.pageSize;
return (Array.isArray(this.filteredGroups) ? this.filteredGroups.slice(s, s + this.pageSize) : []);
},

get totalPages() {
const t = Array.isArray(this.filteredGroups) ? this.filteredGroups.length : 0;
return Math.ceil(t / this.pageSize);
},

get totalGroups() {
return Array.isArray(this.filteredGroups) ? this.filteredGroups.length : 0;
},

get startCount() {
return this.totalGroups === 0 ? 0 : this.currentPage * this.pageSize + 1;
},

get endCount() {
const e = (this.currentPage + 1) * this.pageSize;
return Math.min(e, this.totalGroups);
},

changePage(newPage) {
if (newPage >= 0 && newPage < this.totalPages) {
this.currentPage = newPage;
}
},
{{ end }}

{{ block jsChatAndNavigation() }}
// ===== Chat with DocScout Agent =====
async startDocScoutChat() {
try {
console.log('Starting chat with DocScout agent...');
this.showStatus('info', 'Starting DocScout chat...');

// Get the start token for the document-scout agent
const response = await this.wippyApi.api.get('/api/v1/keeper/agents/start-agent', {
params: { agent: 'document-scout' }
});

if (!response.data.success || !response.data.start_token) {
throw new Error(response.data.error || 'Failed to get agent start token');
}

// Check if iframe API and startChat method are available
if (!this.navigateApi) {
console.error('Navigate API not available');
throw new Error('Navigation API not available');
}

if (typeof this.navigateApi.startChat !== 'function') {
console.error('startChat method not available on navigate API', this.navigateApi);
throw new Error('Chat API not available on navigation interface');
}

// Start the chat with the token
console.log('Attempting to start chat with token...');
const chatResult = await this.navigateApi.startChat(response.data.start_token, true);

this.showStatus('success', 'DocScout chat started successfully');
} catch (error) {
console.error('Error starting DocScout chat:', error);
this.showStatus('error', `Failed to start chat: ${error.message}`);
}
},

// ===== Navigation Actions =====
createGroup() {
console.log("Navigating to create group...");
if (this.navigateApi && typeof this.navigateApi.navigate === 'function') {
this.navigateApi.navigate('/c/keeper.views.docscout:entry');
} else {
console.warn("Navigate API not available.");
this.showStatus('error', "Navigation not available.");
}
},

editGroup(groupId) {
console.log(`Navigating to edit group: ${groupId}`);
if (this.navigateApi && typeof this.navigateApi.navigate === 'function') {
// Construct the correct path with the ID
const targetPath = `/c/keeper.views.docscout:entry/${groupId}`;
console.log(`Calling navigateApi with path: ${targetPath}`);
this.navigateApi.navigate(targetPath);
} else {
console.warn("Navigate API not available.");
this.showStatus('error', "Navigation not available.");
}
},
{{ end }}

{{ block jsDeleteAndConfirmation() }}
// Click-Confirm Delete Logic
confirmDelete(groupId) {
if (this.isDeleting[groupId]) return; // Prevent action while deleting

// Clear previous timeout for this specific group
if (this.deleteTimeout[groupId]) {
clearTimeout(this.deleteTimeout[groupId]);
delete this.deleteTimeout[groupId];
}

if (this.deleteConfirm[groupId]) {
// Second click: confirmation exists, proceed to delete
console.log(`Confirmed delete for: ${groupId}`);
this.deleteGroup(groupId);
} else {
// First click: enter confirm state
console.log(`Requesting delete confirmation for: ${groupId}`);
// Clear confirmations/timeouts for *other* groups
Object.keys(this.deleteConfirm).forEach(id => {
if (this.deleteTimeout[id]) clearTimeout(this.deleteTimeout[id]);
});
this.deleteConfirm = { [groupId]: true }; // Set confirm state ONLY for this ID
this.deleteTimeout = {}; // Clear old timeouts map

// Set a new timeout to reset *this* confirmation state
this.deleteTimeout[groupId] = setTimeout(() => {
if (this.deleteConfirm[groupId]) { // Check if it's still the one
console.log(`Resetting delete confirmation for: ${groupId}`);
const { [groupId]: _, ...rest } = this.deleteConfirm;
this.deleteConfirm = rest;
}
delete this.deleteTimeout[groupId]; // Clean up timeout record
}, 3000); // 3 seconds timeout
}
},

// Actual Delete Action
async deleteGroup(groupId) {
// Clear confirmation state immediately
const { [groupId]: _confirm, ...restConfirm } = this.deleteConfirm;
this.deleteConfirm = restConfirm;
if (this.deleteTimeout[groupId]) {
clearTimeout(this.deleteTimeout[groupId]);
delete this.deleteTimeout[groupId];
}

this.isDeleting = { ...this.isDeleting, [groupId]: true };
console.log(`Attempting delete: ${groupId}`);

try {
// Use iframe.confirm for confirmation
const confirmed = await this.navigateApi.confirm({
message: `Are you sure you want to delete the group "${groupId}"? This action cannot be undone.`,
header: 'Confirm Deletion',
icon: 'tabler:trash',
acceptLabel: 'Delete',
rejectLabel: 'Cancel',
acceptClass: 'p-button-danger',
rejectClass: 'p-button-secondary',
acceptButtonStyleClass: 'p-button-sm'
});

if (!confirmed) {
// User cancelled in the confirmation dialog
console.log(`Delete cancelled for: ${groupId}`);
const { [groupId]: _, ...restDeleting } = this.isDeleting;
this.isDeleting = restDeleting;
return;
}

// Use Wippy API for deletion
const response = await this.wippyApi.api.delete(`/api/v1/keeper/docscout/groups/delete`, {
params: { id: groupId }
});

// Handle response
if (!response.data.success) {
throw new Error(response.data.error || `API error (${response.status})`);
}

console.log(`Successfully deleted group: ${groupId}`);
this.showStatus('success', `Group "${escapeHtml(groupId)}" deleted.`);
this.groups = this.groups.filter(g => g.id !== groupId);
this.applyFilter(); // Re-filter and update UI

// Adjust page if needed
if (this.currentPage >= this.totalPages && this.totalPages > 0) {
this.changePage(this.totalPages - 1);
}

} catch (error) {
console.error(`Error deleting group ${groupId}:`, error);
this.showStatus('error', `Failed to delete group: ${error.message}`);
} finally {
const { [groupId]: _, ...restDeleting } = this.isDeleting; // Remove deleting status immutably
this.isDeleting = restDeleting;
}
},
{{ end }}

{{ block jsUIHelpers() }}
// ===== UI Helpers =====
truncateDescription(description) {
const desc = description || '';
if (desc.length > 80) { return escapeHtml(desc.substring(0, 80)) + '...'; }
const escapedDesc = escapeHtml(desc);
return escapedDesc ? escapedDesc : '<span class="italic text-surface-500 dark:text-surface-400">No description</span>';
},

showStatus(type, message, duration = 5000) {
window.dispatchEvent(new CustomEvent('status-update', { detail: { type, message, duration } }));
}
{{ end }}