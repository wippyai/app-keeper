{{ extends "common/layout" }}

{* Page title and description *}
{{ block title() }}Workflow Manager{{ end }}
{{ block metaDescription() }}View and manage your dataflows{{ end }}

{{ block mainContent() }}
<div x-data="dataflowListApp" x-init="initialize()" class="space-y-4">
    <!-- Header with controls -->
    <div class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden">
        <div class="px-6 py-4 border-b border-surface-200 dark:border-surface-600">
            <div class="flex flex-wrap items-center justify-between gap-4">
                <div>
                    <h1 class="text-xl leading-6 font-medium text-surface-900 dark:text-surface-100">
                        Workflow Manager
                        <span x-show="isLoading" class="inline-block ml-2">
                            <iconify-icon icon="tabler:loader-2" class="animate-spin" width="20"
                                          height="20"></iconify-icon>
                        </span>
                    </h1>
                    <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">
                        View and manage your dataflow executions
                    </p>
                </div>
                <div class="flex flex-wrap gap-2">
                    <div class="relative w-64">
                        <input
                                type="text"
                                x-model="searchTerm"
                                @input.debounce.500ms="applyFilters()"
                                class="block w-full pl-10 pr-3 py-2 border border-surface-300 dark:border-surface-600 rounded-md shadow-sm bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-400 focus:border-primary-400 sm:text-sm"
                                placeholder="Search by title or ID">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <iconify-icon icon="tabler:search"
                                          class="h-5 w-5 text-surface-400 dark:text-surface-500"></iconify-icon>
                        </div>
                        <button
                                @click="clearSearch()"
                                x-show="searchTerm.length > 0"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center cursor-pointer text-surface-400 hover:text-surface-600 dark:hover:text-surface-300">
                            <iconify-icon icon="tabler:x" class="h-4 w-4"></iconify-icon>
                        </button>
                    </div>
                    <div class="relative w-40">
                        <select
                                x-model="statusFilter"
                                @change="applyFilters()"
                                class="block w-full pl-3 pr-10 py-2 border border-surface-300 dark:border-surface-600 rounded-md shadow-sm bg-white dark:bg-surface-700 text-surface-900 dark:text-surface-100 focus:outline-none focus:ring-primary-400 focus:border-primary-400 sm:text-sm"
                        >
                            <option value="">All Statuses</option>
                            <option value="pending">Pending</option>
                            <option value="ready">Ready</option>
                            <option value="running">Running</option>
                            <option value="completed">Completed</option>
                            <option value="failed">Failed</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                    <button
                            @click="refreshWorkflows"
                            :disabled="isLoading"
                            class="inline-flex items-center px-3 py-2 border border-surface-300 dark:border-surface-600 shadow-sm text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
                            :class="{'opacity-50 cursor-not-allowed': isLoading}">
                        <iconify-icon :icon="isLoading ? 'tabler:loader-2' : 'tabler:refresh'"
                                      :class="{'animate-spin': isLoading}" class="mr-2" width="20"
                                      height="20"></iconify-icon>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Loading Indicator -->
    <div x-show="isLoading && displayedWorkflows.length === 0"
         class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg p-6 text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600 mx-auto"></div>
        <p class="mt-4 text-surface-600 dark:text-surface-400">Loading dataflows...</p>
    </div>

    <!-- Error Message -->
    <div x-show="error" class="bg-red-50 dark:bg-red-900/30 border border-red-200 dark:border-red-800 p-4 rounded-lg">
        <div class="flex">
            <iconify-icon icon="tabler:alert-circle"
                          class="h-5 w-5 text-red-600 dark:text-red-400 mt-0.5 mr-3"></iconify-icon>
            <div>
                <h3 class="text-sm font-medium text-red-800 dark:text-red-300">Error Loading Workflows</h3>
                <p class="mt-1 text-sm text-red-700 dark:text-red-400" x-text="error"></p>
                <button
                        @click="refreshWorkflows"
                        class="mt-2 inline-flex items-center px-2.5 py-1.5 border border-red-300 dark:border-red-700 text-xs font-medium rounded text-red-700 dark:text-red-300 bg-white dark:bg-red-900 hover:bg-red-50 dark:hover:bg-red-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                    Try Again
                </button>
            </div>
        </div>
    </div>

    <!-- Workflows Table -->
    <div x-show="!isLoading || displayedWorkflows.length > 0"
         class="bg-surface-50 dark:bg-surface-700 shadow rounded-lg overflow-hidden">
        <!-- Empty State -->
        <div x-show="!isLoading && displayedWorkflows.length === 0 && totalItemsCount === 0" class="py-12 text-center">
            <iconify-icon icon="tabler:dataflow" class="w-16 h-16 mx-auto text-surface-400 dark:text-surface-600"
                          width="64" height="64"></iconify-icon>
            <h3 class="mt-4 text-sm font-medium text-surface-900 dark:text-surface-100"
                x-text="statusFilter ? 'No dataflows matching your filters' : 'No dataflows found'"></h3>
            <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">
                <span x-show="statusFilter">Try adjusting your filters.</span>
                <span x-show="!statusFilter">There are currently no dataflows.</span>
            </p>
        </div>
        <div x-show="!isLoading && displayedWorkflows.length === 0 && totalItemsCount > 0 && searchTerm" class="py-12 text-center">
            <iconify-icon icon="tabler:search-off" class="w-16 h-16 mx-auto text-surface-400 dark:text-surface-600"
                          width="64" height="64"></iconify-icon>
            <h3 class="mt-4 text-sm font-medium text-surface-900 dark:text-surface-100">No dataflows matching your search</h3>
            <p class="mt-1 text-sm text-surface-500 dark:text-surface-400">
                Try adjusting your search term.
            </p>
        </div>


        <!-- Table Header -->
        <table x-show="displayedWorkflows.length > 0"
               class="min-w-full divide-y divide-surface-200 dark:divide-surface-600 table-fixed">
            <thead class="bg-surface-100 dark:bg-surface-800">
            <tr>
                <th scope="col"
                    class="w-2/6 px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Workflow Info
                </th>
                <th scope="col"
                    class="hidden lg:table-cell w-1/6 px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Type
                </th>
                <th scope="col"
                    class="w-1/6 px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Status
                </th>
                <th scope="col"
                    class="hidden sm:table-cell w-1/6 px-6 py-3 text-left text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Created
                </th>
                <th scope="col"
                    class="w-1/6 px-6 py-3 text-right text-xs font-medium text-surface-500 dark:text-surface-400 uppercase tracking-wider">
                    Actions
                </th>
            </tr>
            </thead>
            <tbody class="bg-white dark:bg-surface-700 divide-y divide-surface-200 dark:divide-surface-600">
            <template x-for="dataflow in displayedWorkflows" :key="dataflow.dataflow_id">
                <tr class="hover:bg-surface-50 dark:hover:bg-surface-600">
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div>
                            <!-- Content for medium screens and up (md+) -->
                            <div class="hidden md:block">
                                <div class="text-sm font-medium text-surface-900 dark:text-surface-100">
                                <span x-text="dataflow.metadata?.title || 'Untitled Workflow'"
                                      class="block truncate"
                                      :title="dataflow.metadata?.title || 'Untitled Workflow'"></span>
                                </div>
                                <div class="text-xs font-mono text-surface-500 dark:text-surface-400 mt-1 truncate">
                                    <span x-text="dataflow.dataflow_id" :title="dataflow.dataflow_id"></span>
                                </div>
                            </div>
                            <!-- Content for small screens (up to md) -->
                            <div class="md:hidden">
                                <div class="text-sm font-mono text-surface-900 dark:text-surface-100">
                                <span x-text="dataflow.dataflow_id"
                                      class="block truncate"
                                      :title="dataflow.dataflow_id"></span>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td class="hidden lg:table-cell px-6 py-4 whitespace-nowrap">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                          :class="{
                                'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200': dataflow.type === 'sequential',
                                'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200': dataflow.type === 'parallel',
                                'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200': dataflow.type === 'custom',
                                'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200': !['sequential', 'parallel', 'custom'].includes(dataflow.type)
                              }"
                          x-text="dataflow.type || 'unknown'"></span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium capitalize"
                              :class="{
                                'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200': dataflow.status === 'pending',
                                'bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200': dataflow.status === 'ready',
                                'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200': dataflow.status === 'running',
                                'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200': dataflow.status === 'completed',
                                'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200': dataflow.status === 'failed',
                                'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200': dataflow.status === 'cancelled',
                                'bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200': !['pending', 'ready', 'running', 'completed', 'failed', 'cancelled'].includes(dataflow.status)
                              }"
                              x-text="dataflow.status || 'unknown'"></span>
                    </td>
                    <td class="hidden sm:table-cell px-6 py-4 whitespace-nowrap text-sm text-surface-700 dark:text-surface-300">
                        <div x-text="formatDate(dataflow.created_at)" :title="formatDate(dataflow.created_at)"></div>
                        <div class="text-xs text-surface-500 dark:text-surface-400"
                             x-text="getTimeAgo(dataflow.created_at)"></div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                        <a @click="viewWorkflow(dataflow.dataflow_id)"
                           class="inline-flex items-center px-3 py-1.5 border border-transparent text-xs font-medium rounded shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 cursor-pointer mr-2">
                            <iconify-icon icon="tabler:eye" class="mr-1" width="14" height="14"></iconify-icon>
                            View
                        </a>
                    </td>
                </tr>
            </template>
            </tbody>
        </table>

        <!-- Pagination -->
        <div x-show="totalPages > 1"
             class="bg-surface-50 dark:bg-surface-800 px-4 py-3 flex items-center justify-between border-t border-surface-200 dark:border-surface-600 sm:px-6">
            <div class="flex-1 flex justify-between items-center">
                <div>
                    <p class="text-sm text-surface-700 dark:text-surface-300">
                        Showing <span class="font-medium" x-text="pageStartItemText"></span> to
                        <span class="font-medium" x-text="pageEndItemText"></span> of
                        <span class="font-medium" x-text="totalItemsCount"></span> results
                    </p>
                </div>
                <div class="flex space-x-2">
                    <button @click="prevPage" :disabled="currentPage === 0"
                            class="relative inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed">
                        Previous
                    </button>
                    <button @click="nextPage" :disabled="currentPage >= totalPages - 1"
                            class="relative inline-flex items-center px-4 py-2 border border-surface-300 dark:border-surface-600 text-sm font-medium rounded-md text-surface-700 dark:text-surface-300 bg-white dark:bg-surface-800 hover:bg-surface-50 dark:hover:bg-surface-700 disabled:opacity-50 disabled:cursor-not-allowed">
                        Next
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Confirmation Modal Removed -->
</div>
{{ end }}

{{ block customJs() }}
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('dataflowListApp', () => ({
            // State
            allDataflowsForCurrentPage: [], // Raw data from API for the current page
            displayedWorkflows: [],    // Dataflows shown in table (after client-side search)
            isLoading: true,
            error: null,
            searchTerm: '',
            statusFilter: '',
            currentPage: 0, // 0-indexed
            pageSize: 10,
            totalItemsCount: 0, // Total items matching API filters (status)
            wippyApi: null,
            navigateApi: null,
            // Removed delete modal states

            // Computed properties for pagination
            get totalPages() {
                if (this.totalItemsCount === 0) return 0;
                return Math.ceil(this.totalItemsCount / this.pageSize);
            },
            get pageStartItemText() {
                if (this.totalItemsCount === 0) return 0;
                return this.currentPage * this.pageSize + 1;
            },
            get pageEndItemText() {
                if (this.totalItemsCount === 0) return 0;
                return Math.min((this.currentPage + 1) * this.pageSize, this.totalItemsCount);
            },

            // Initialization
            async initialize() {
                console.log('Initializing Workflow List App...');
                this.isLoading = true;
                try {
                    if (typeof window.initWippyApi !== 'function') {
                        throw new Error("initWippyApi function not found");
                    }
                    this.wippyApi = await window.initWippyApi();
                    if (this.wippyApi?.iframe) {
                        this.navigateApi = this.wippyApi.iframe;
                        console.log('Wippy API and Navigation API initialized');
                    } else {
                        console.warn("Navigation API not available");
                    }
                    await this.loadWorkflows();
                } catch (err) {
                    console.error('Failed to initialize:', err);
                    this.error = `Initialization error: ${err.message}`;
                    this.isLoading = false;
                }
            },

            // Load dataflows data from API
            async loadWorkflows() {
                this.isLoading = true;
                this.error = null;
                try {
                    console.log(`Loading dataflows for page ${this.currentPage}, status: '${this.statusFilter}'...`);
                    if (!this.wippyApi || !this.wippyApi.api) {
                        throw new Error("Wippy API not properly initialized.");
                    }

                    let queryParams = {
                        limit: this.pageSize,
                        offset: this.currentPage * this.pageSize
                    };
                    if (this.statusFilter) {
                        queryParams.status = this.statusFilter;
                    }

                    const response = await this.wippyApi.api.get('/api/v1/dataflows', {
                        params: queryParams
                    });

                    if (!response.data.success) {
                        throw new Error(response.data.error || 'Failed to load dataflows');
                    }

                    this.allDataflowsForCurrentPage = response.data.dataflows || [];
                    this.totalItemsCount = response.data.count || 0;
                    this.applyClientSideSearch();

                    console.log(`Loaded ${this.allDataflowsForCurrentPage.length} dataflows for current page, total matching API filters: ${this.totalItemsCount}`);

                } catch (err) {
                    console.error('Error loading dataflows:', err);
                    this.error = `Failed to load dataflows: ${err.message}`;
                    this.allDataflowsForCurrentPage = [];
                    this.displayedWorkflows = [];
                    this.totalItemsCount = 0;
                } finally {
                    this.isLoading = false;
                }
            },

            applyClientSideSearch() {
                if (!this.searchTerm) {
                    this.displayedWorkflows = [...this.allDataflowsForCurrentPage];
                    return;
                }
                const term = this.searchTerm.toLowerCase();
                this.displayedWorkflows = this.allDataflowsForCurrentPage.filter(dataflow => {
                    const title = dataflow.metadata?.title || '';
                    return (title.toLowerCase().includes(term)) ||
                        (dataflow.dataflow_id && dataflow.dataflow_id.toLowerCase().includes(term));
                });
            },

            applyFilters() {
                this.currentPage = 0;
                this.loadWorkflows();
            },

            clearSearch() {
                this.searchTerm = '';
                this.applyClientSideSearch();
            },

            refreshWorkflows() {
                this.loadWorkflows();
            },

            prevPage() {
                if (this.currentPage > 0) {
                    this.currentPage--;
                    this.loadWorkflows();
                }
            },
            nextPage() {
                if (this.currentPage < this.totalPages - 1) {
                    this.currentPage++;
                    this.loadWorkflows();
                }
            },

            viewWorkflow(dataflow_id) {
                console.log(`Viewing dataflow: ${dataflow_id}`);
                if (this.navigateApi) {
                    this.navigateApi.navigate('/c/keeper.views.dataflow:view/' + dataflow_id);
                } else {
                    console.warn('Navigation API not available, cannot view dataflow.');
                    window.location.href = `/dataflows/view/${dataflow_id}`;
                }
            },

            async pauseWorkflow(dataflow) {
                if (dataflow.status !== 'running') {
                    console.warn(`Cannot pause dataflow in status ${dataflow.status}`);
                    return;
                }
                console.log(`Pausing dataflow: ${dataflow.dataflow_id}`);

                try {
                    const response = await this.wippyApi.api.post(`/api/v1/dataflows/${dataflow.dataflow_id}/status`, {
                        status: 'paused'
                    });

                    if (!response.data.success || !response.data.dataflow) {
                        throw new Error(response.data.error || `Failed to pause dataflow`);
                    }

                    const index = this.allDataflowsForCurrentPage.findIndex(w => w.dataflow_id === dataflow.dataflow_id);
                    if (index !== -1) {
                        this.allDataflowsForCurrentPage[index].status = response.data.dataflow.status;
                        this.applyClientSideSearch();
                    }
                    alert(`Workflow status updated to ${response.data.dataflow.status} successfully.`);
                } catch (err) {
                    console.error(`Error pausing dataflow:`, err);
                    alert(`Failed to pause dataflow: ${err.message}`);
                }
            },

            formatDate(dateString) {
                if (!dateString) return 'N/A';
                try {
                    const date = new Date(dateString);
                    return date.toLocaleString(undefined, { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' });
                } catch {
                    return dateString || 'N/A';
                }
            },
            getTimeAgo(dateString) {
                if (!dateString) return '';
                try {
                    const date = new Date(dateString);
                    const now = new Date();
                    const diffMs = now - date;
                    const diffSec = Math.floor(diffMs / 1000);

                    if (diffSec < 60) return 'just now';
                    const diffMin = Math.floor(diffSec / 60);
                    if (diffMin < 60) return `${diffMin}m ago`;
                    const diffHour = Math.floor(diffMin / 60);
                    if (diffHour < 24) return `${diffHour}h ago`;
                    const diffDay = Math.floor(diffHour / 24);
                    if (diffDay < 30) return `${diffDay}d ago`;
                    const diffMonth = Math.floor(diffDay / 30);
                    if (diffMonth < 12) return `${diffMonth}mo ago`;
                    const diffYear = Math.floor(diffDay / 365);
                    return `${diffYear}y ago`;
                } catch {
                    return '';
                }
            }
        }));
    });
</script>
{{ end }}